/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2012
   Author(s): Christophe Grosjean

   Unit test for mouse cursor primitives
*/

#define RED_TEST_MODULE TestCursor
#include "system/redemption_unit_tests.hpp"
#include "test_only/check_sig.hpp"

#include "utils/bitmap.hpp"
#include "utils/drawable.hpp"
#include "utils/png.hpp"
#include "test_only/fake_graphic.hpp"
#include "mod/rdp/rdp_orders.hpp"
#include "utils/verbose_flags.hpp"

#include "core/RDP/rdp_pointer.hpp"


RED_AUTO_TEST_CASE(TestDataSize)
{
    Pointer p;

    RED_CHECK_EQUAL(p.xor_data_size(), 32 * 32 * 3);
}

RED_AUTO_TEST_CASE(TestNormalPointer)
{
    NormalPointer cursor;
    RED_CHECK_EQUAL(cursor.get_dimensions().width, 32);
    RED_CHECK_EQUAL(cursor.get_dimensions().height, 32);
    RED_CHECK_MEM(make_array_view(cursor.data, cursor.get_dimensions().width*cursor.get_dimensions().height),
                 make_array_view(
                /* 0000 */ "................................"
                /* 0060 */ "................................"
                /* 00c0 */ "................................"
                /* 0120 */ "................................"
                /* 0180 */ "................................"
                /* 01e0 */ "................................"
                /* 0240 */ "................................"
                /* 02a0 */ "................................"
                /* 0300 */ "................................"
                /* 0360 */ "................................"
                /* 03c0 */ "................................"
                /* 0420 */ "................................"
                /* 0480 */ "................................"
                /* 04e0 */ ".......XX......................."
                /* 0540 */ "......X++X......................"
                /* 05a0 */ "......X++X......................"
                /* 0600 */ ".....X++X......................."
                /* 0660 */ "X....X++X......................."
                /* 06c0 */ "XX..X++X........................"
                /* 0720 */ "X+X.X++X........................"
                /* 0780 */ "X++X++X........................."
                /* 07e0 */ "X+++++XXXXX....................."
                /* 0840 */ "X++++++++X......................"
                /* 08a0 */ "X+++++++X......................."
                /* 0900 */ "X++++++X........................"
                /* 0960 */ "X+++++X........................."
                /* 09c0 */ "X++++X.........................."
                /* 0a20 */ "X+++X..........................."
                /* 0a80 */ "X++X............................"
                /* 0ae0 */ "X+X............................."
                /* 0b40 */ "XX.............................."
                /* 0ba0 */ "X...............................",
                32*32));
}

RED_AUTO_TEST_CASE(TestPointerNormal)
{
    Pointer p(NormalPointer{});

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0008 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0010 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0018 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0020 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0028 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0030 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFE, 0x7F, 0xFF, 0xFF, // 11111110 01111111
        /* 0038 */ 0xFC, 0x3F, 0xFF, 0xFF, // 11111100 00111111
                   0xFC, 0x3F, 0xFF, 0xFF,
        /* 0040 */ 0xF8, 0x7F, 0xFF, 0xFF,
                   0x78, 0x7F, 0xFF, 0xFF,
        /* 0048 */ 0x30, 0xFF, 0xFF, 0xFF,
                   0x10, 0xFF, 0xFF, 0xFF, // 00010000
        /* 0050 */ 0x01, 0xFF, 0xFF, 0xFF,
                   0x00, 0x1F, 0xFF, 0xFF,
        /* 0058 */ 0x00, 0x3F, 0xFF, 0xFF,
                   0x00, 0x7F, 0xFF, 0xFF,
        /* 0060 */ 0x00, 0xFF, 0xFF, 0xFF,
                   0x01, 0xFF, 0xFF, 0xFF,
        /* 0068 */ 0x03, 0xFF, 0xFF, 0xFF,
                   0x07, 0xFF, 0xFF, 0xFF,
        /* 0070 */ 0x0F, 0xFF, 0xFF, 0xFF,
                   0x1F, 0xFF, 0xFF, 0xFF,
        /* 0078 */ 0x3F, 0xFF, 0xFF, 0xFF,
                   0x7F, 0xFF, 0xFF, 0xFF,
    };

    RED_CHECK_MEM(p.get_monochrome_and_mask(), make_array_view(expected, sizeof(expected)));
    const char * sig = "\x48\x58\x41\x28\xb0\xb4\x03\x27\x69\x31\x47\xc8\x2b\x43\x3e\xf3\x33\x80\x1c\xb2";
    auto av = p.get_24bits_xor_mask();
    RED_CHECK_EQUAL(av.size(), 32*32*3);
//    uint8_t expected_data[32*32*3] = {};
//    RED_CHECK_MEM(av, make_array_view(expected_data, sizeof(expected_data)));
    RED_CHECK_SIG2(av.data(), av.size(), sig);

}

RED_AUTO_TEST_CASE(TestPointerEdit)
{
    Pointer p(EditPointer{});

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */   0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0008 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0010 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0018 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xe1 ,0x0f ,0xff
        /* 0020 */  ,0xff ,0xe0 ,0x0f ,0xff
                    ,0xff ,0xe0 ,0x0f ,0xff
        /* 0028 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0030 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0038 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0040 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0048 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0050 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0058 */  ,0xff ,0xe0 ,0x0f ,0xff
                    ,0xff ,0xe0 ,0x0f ,0xff
        /* 0060 */  ,0xff ,0xe1 ,0x0f ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0068 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0070 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0078 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
    };
    RED_CHECK_MEM(p.get_monochrome_and_mask(), make_array_view(expected, sizeof(expected)));
    const char * sig = "\x09\xb3\xc6\x81\x07\xef\x2e\xd4\xcb\x1a\xa9\xeb\x2c\xb8\xe9\x13\xfb\xaf\xe2\xe3";
    auto av = p.get_24bits_xor_mask();
    RED_CHECK_SIG2(av.data(), av.size(), sig);
}

RED_AUTO_TEST_CASE(TestPointerDrawableDefault)
{
    Pointer p(DrawableDefaultPointer{});

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0038 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xbc, 0x3f, 0xFF, 0xFF
        /* 0040 */ , 0x18, 0x7f, 0xFF, 0xFF
                   , 0x08, 0x7f, 0xFF, 0xFF
        /* 0048 */ , 0x00, 0xff, 0xFF, 0xFF
                   , 0x00, 0x0f, 0xFF, 0xFF
        /* 0050 */ , 0x00, 0x0f, 0xFF, 0xFF
                   , 0x00, 0x1f, 0xFF, 0xFF
        /* 0058 */ , 0x00, 0x3f, 0xFF, 0xFF
                   , 0x00, 0x7f, 0xFF, 0xFF
        /* 0060 */ , 0x00, 0xff, 0xFF, 0xFF
                   , 0x01, 0xff, 0xFF, 0xFF
        /* 0068 */ , 0x03, 0xff, 0xFF, 0xFF
                   , 0x07, 0xff, 0xFF, 0xFF
        /* 0070 */ , 0x0f, 0xff, 0xFF, 0xFF
                   , 0x1f, 0xff, 0xFF, 0xFF
        /* 0078 */ , 0x3f, 0xff, 0xFF, 0xFF
                   , 0x7f, 0xff, 0xFF, 0xFF
    };
    RED_CHECK_MEM(p.get_monochrome_and_mask(), make_array_view(expected, sizeof(expected)));
    const char * sig = "\x46\x59\xfc\xbc\x13\x24\x18\xd6\x83\xa3\x6a\xc2\xea\xf8\x93\x2b\x30\x4f\x80\x0e";
    auto av = p.get_24bits_xor_mask();
    RED_CHECK_SIG2(av.data(), av.size(), sig);
}

RED_AUTO_TEST_CASE(TestPointerSystemDefault)
{

    Pointer p(SystemDefaultPointer{});

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xcf, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0x87, 0xFF
                   , 0xFF, 0xFF, 0x87, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0x0f, 0xFF
                   , 0xFF, 0xdf, 0x0f, 0xFF
        /* 0018 */ , 0xFF, 0xce, 0x1f, 0xFF
                   , 0xFF, 0xc6, 0x1f, 0xFF
        /* 0020 */ , 0xFF, 0xc0, 0x3f, 0xFF
                   , 0xFF, 0xc0, 0x3f, 0xFF
        /* 0028 */ , 0xFF, 0xc0, 0x03, 0xFF
                   , 0xFF, 0xc0, 0x07, 0xFF
        /* 0030 */ , 0xFF, 0xc0, 0x0f, 0xFF
                   , 0xFF, 0xc0, 0x1f, 0xFF
        /* 0038 */ , 0xFF, 0xc0, 0x3f, 0xFF
                   , 0xFF, 0xc0, 0x7f, 0xFF
        /* 0040 */ , 0xFF, 0xc0, 0xFF, 0xFF
                   , 0xFF, 0xc1, 0xFF, 0xFF
        /* 0048 */ , 0xFF, 0xc3, 0xFF, 0xFF
                   , 0xFF, 0xc7, 0xFF, 0xFF
        /* 0050 */ , 0xFF, 0xcf, 0xFF, 0xFF
                   , 0xFF, 0xdf, 0xFF, 0xFF
        /* 0058 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0060 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0068 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0070 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
    };
    RED_CHECK_MEM(p.get_monochrome_and_mask(), make_array_view(expected, sizeof(expected)));
    const char * sig = "\xc5\xc1\x0e\x3a\x17\x39\x56\x0c\xf9\xd7\x66\xac\x3b\x23\x23\xad\xec\xb5\xd9\x46";
    auto av = p.get_24bits_xor_mask();
    RED_CHECK_SIG2(av.data(), av.size(), sig);
}

RED_AUTO_TEST_CASE(TestPointerSizeNS)
{

    Pointer p(SizeNSPointer{});

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xdf, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x07, 0xFF, 0xFF
        /* 0038 */ , 0xfe, 0x03, 0xFF, 0xFF
                   , 0xfc, 0x01, 0xFF, 0xFF
        /* 0040 */ , 0xfc, 0x01, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0048 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0050 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0058 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0060 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0068 */ , 0xfc, 0x01, 0xFF, 0xFF
                   , 0xfc, 0x01, 0xFF, 0xFF
        /* 0070 */ , 0xfe, 0x03, 0xFF, 0xFF
                   , 0xFF, 0x07, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0xdf, 0xFF, 0xFF
    };
    RED_CHECK_MEM(p.get_monochrome_and_mask(), make_array_view(expected, sizeof(expected)));
    const char * sig = "\x3a\x74\xfe\x82\xcf\xa9\x15\x9e\xa0\x8a\xf9\x43\x77\x40\xf8\xe6\xdf\x13\xd0\xe1";
    auto av = p.get_24bits_xor_mask();
    RED_CHECK_SIG2(av.data(), av.size(), sig);
}

RED_AUTO_TEST_CASE(TestPointerSizeNESW)
{
    Pointer p(SizeNESWPointer{});

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {

        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0038 */ , 0xe0, 0x3f, 0xFF, 0xFF
                   , 0xe0, 0x3f, 0xFF, 0xFF
        /* 0040 */ , 0xe0, 0x7f, 0xFF, 0xFF
                   , 0xe0, 0xff, 0xFF, 0xFF
        /* 0048 */ , 0xe0, 0x7f, 0xFF, 0xFF
                   , 0xe2, 0x3f, 0xFF, 0xFF
        /* 0050 */ , 0xe7, 0x1f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0058 */ , 0xFF, 0xc7, 0x3f, 0xFF
                   , 0xFF, 0xe2, 0x3f, 0xFF
        /* 0060 */ , 0xFF, 0xf0, 0x3f, 0xFF
                   , 0xFF, 0xf8, 0x3f, 0xFF
        /* 0068 */ , 0xFF, 0xf0, 0x3f, 0xFF
                   , 0xFF, 0xe0, 0x3f, 0xFF
        /* 0070 */ , 0xFF, 0xe0, 0x3f, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
    };
    RED_CHECK_MEM(p.get_monochrome_and_mask(), make_array_view(expected, sizeof(expected)));
    const char * sig = "\x57\xed\x01\xb4\xe3\x9c\xe7\xc1\x0c\x9f\x01\xa1\xdc\x66\x4c\x92\x83\x05\x0e\x91";
    auto av = p.get_24bits_xor_mask();
    RED_CHECK_SIG2(av.data(), av.size(), sig);
}

RED_AUTO_TEST_CASE(TestPointerSizeNWSE)
{
    Pointer p(SizeNWSEPointer{});

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {

        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0038 */ , 0xFF, 0xe0, 0x3f, 0xFF
                   , 0xFF, 0xe0, 0x3f, 0xFF
        /* 0040 */ , 0xFF, 0xf0, 0x3f, 0xFF
                   , 0xFF, 0xf8, 0x3f, 0xFF
        /* 0048 */ , 0xFF, 0xf0, 0x3f, 0xFF
                   , 0xFF, 0xe2, 0x3f, 0xFF
        /* 0050 */ , 0xFF, 0xc7, 0x3f, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0058 */ , 0xe7, 0x1f, 0xFF, 0xFF
                   , 0xe2, 0x3f, 0xFF, 0xFF
        /* 0060 */ , 0xe0, 0x7f, 0xFF, 0xFF
                   , 0xe0, 0xff, 0xFF, 0xFF
        /* 0068 */ , 0xe0, 0x7f, 0xFF, 0xFF
                   , 0xe0, 0x3f, 0xFF, 0xFF
        /* 0070 */ , 0xe0, 0x3f, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
    };
    RED_CHECK_MEM(p.get_monochrome_and_mask(), make_array_view(expected, sizeof(expected)));
    const char * sig = "\x6b\x3a\xec\xa9\x22\x1f\x23\x5d\x2c\xe6\x91\xcc\x70\x56\xf9\x02\x30\x05\xaa\x3f";
    auto av = p.get_24bits_xor_mask();
    RED_CHECK_SIG2(av.data(), av.size(), sig);
}

RED_AUTO_TEST_CASE(TestPointerSizeWE)
{
    Pointer p(SizeWEPointer{});

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0038 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0040 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xf3, 0xfe, 0x7f, 0xFF
        /* 0048 */ , 0xe3, 0xfe, 0x3f, 0xFF
                   , 0xc3, 0xfe, 0x1f, 0xFF
        /* 0050 */ , 0x80, 0x00, 0x0f, 0xFF
                   , 0x00, 0x00, 0x07, 0xFF
        /* 0058 */ , 0x80, 0x00, 0x0f, 0xFF
                   , 0xc3, 0xfe, 0x1f, 0xFF
        /* 0060 */ , 0xe3, 0xfe, 0x3f, 0xFF
                   , 0xf3, 0xfe, 0x7f, 0xFF
        /* 0068 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0070 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
    };
    RED_CHECK_MEM(p.get_monochrome_and_mask(), make_array_view(expected, sizeof(expected)));
    const char * sig = "\xae\x83\x2a\x8e\xd0\x73\x0b\x77\xe3\xb5\xf0\x4e\xbd\x0f\x4e\xa9\xd0\x65\xeb\x59";
    auto av = p.get_24bits_xor_mask();
    RED_CHECK_SIG2(av.data(), av.size(), sig);
}

RED_AUTO_TEST_CASE(TestPointerVNC_BW)
{
    uint8_t data[] = {
        /* 0000 */ 0x01, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 0010 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00,
        /* 0020 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 0030 */ 0x01, 0x00, 0xff, 0xff, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 0040 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00,
        /* 0050 */ 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 0060 */ 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 0070 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        /* 0080 */ 0xff, 0xff, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 0090 */ 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x22, 0x00,
        /* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        /* 00b0 */ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 00c0 */ 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff,
        /* 00d0 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        /* 00e0 */ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9e, 0xf7, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00,
        /* 00f0 */ 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        /* 0100 */ 0xff, 0xff, 0x5d, 0xef, 0x02, 0x00, 0x22, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        /* 0110 */ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1c, 0xe7, 0x02, 0x00,
        /* 0120 */ 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xf7, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00,
        /* 0130 */ 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xf7,
        /* 0140 */ 0x01, 0x00, 0xb7, 0xb5, 0xff, 0xff, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 0150 */ 0x01, 0x00, 0xff, 0xff, 0xbe, 0xf7, 0x01, 0x00, 0x22, 0x00, 0x01, 0x00, 0xff, 0xff, 0x1c, 0xe7,
        /* 0160 */ 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xbe, 0xf7, 0x01, 0x00, 0x22, 0x00,
        /* 0170 */ 0x00, 0x00, 0x02, 0x00, 0x19, 0xc6, 0xff, 0xff, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 0180 */ 0x02, 0x00, 0x01, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x01, 0x00, 0xff, 0xff,
        /* 0190 */ 0xbb, 0xd6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 01a0 */ 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xbb, 0xd6, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* 01b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x01, 0x00,
        /* 01c0 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    uint8_t mask[] = {
        /* 0000 */ 0x80, 0x00,
                   0xc0, 0x00,
                   0xe0, 0x00,
                   0xf0, 0x00,
                   0xf8, 0x00,
                   0xfc, 0x00,
                   0xfe, 0x00,
                   0xff, 0x00,
        /* 0010 */ 0xff, 0x80,
                   0xff, 0xc0,
                   0xff, 0xe0,
                   0xff, 0xf0,
                   0xff, 0xb0,
                   0xff, 0x00,
                   0xf7, 0x80,
                   0xe7, 0x80,
        /* 0020 */ 0xc3, 0xc0,
                   0x03, 0xc0,
                   0x01, 0x00,
    };

    std::vector<uint8_t> vncdata(data, sizeof(data) + data);
    std::vector<uint8_t> vncmask(mask, sizeof(mask) + mask);

    // r31 rs<<11 g63 gs<<5 b31 bs<<0

    Pointer vnccursor(2, CursorSize{12, 19}, Hotspot{0, 0}, vncdata, vncmask, 11, 31, 5, 63, 0, 31, 2, 36);

    RED_CHECK_EQUAL(vnccursor.get_dimensions().width, 32);
    RED_CHECK_EQUAL(vnccursor.get_dimensions().height, 19);
    RED_CHECK_EQUAL(vnccursor.get_hotspot().x, 0);
    RED_CHECK_EQUAL(vnccursor.get_hotspot().y, 0);
    auto d = vnccursor.get_24bits_xor_mask();
    auto m = vnccursor.get_monochrome_and_mask();

    RED_CHECK_EQUAL(m.size(), 76);

    uint8_t expected_mask[] = {
        0xfe, 0xff, 0xFF, 0xFF,
        0xfc, 0x3f, 0xFF, 0xFF,
        0x3c, 0x3f, 0xFF, 0xFF,
        0x18, 0x7f, 0xFF, 0xFF,
        0x08, 0x7f, 0xFF, 0xFF,
        0x00, 0xff, 0xFF, 0xFF,
        0x00, 0x4f, 0xFF, 0xFF,
        0x00, 0x0f, 0xFF, 0xFF,
        0x00, 0x1f, 0xFF, 0xFF,
        0x00, 0x3f, 0xFF, 0xFF,
        0x00, 0x7f, 0xFF, 0xFF,
        0x00, 0xff, 0xFF, 0xFF,
        0x01, 0xff, 0xFF, 0xFF,
        0x03, 0xff, 0xFF, 0xFF,
        0x07, 0xff, 0xFF, 0xFF,
        0x0f, 0xff, 0xFF, 0xFF,
        0x1f, 0xff, 0xFF, 0xFF,
        0x3f, 0xff, 0xFF, 0xFF,
        0x7f, 0xff, 0xFF, 0xFF,
    };
    RED_CHECK_MEM(vnccursor.get_monochrome_and_mask(), make_array_view(expected_mask, sizeof(expected_mask)));

    uint8_t expected_data[] = {
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x61, 0x00, 0x00, 0x20, 0x00,
          0x00, 0x41, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0xbd, 0x79, 0xb5,
          0xff, 0xff, 0xff, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x41, 0x00, 0x00, 0x20, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x21, 0x41, 0x00, 0x00, 0x20, 0x00, 0xff, 0xff, 0xff,
          0xbd, 0x79, 0xb5, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xbd, 0xdf, 0xbd, 0x00, 0x20, 0x00, 0x21, 0x41, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x18, 0x38, 0x31, 0xff, 0xff, 0xff,
          0x00, 0x41, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xbd, 0xdf, 0xbd, 0x00, 0x20, 0x00,
          0x21, 0x41, 0x00, 0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0x18, 0x9e, 0x39,
          0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbd, 0xdf, 0xbd,
          0x00, 0x20, 0x00, 0xb5, 0xf7, 0xad, 0xff, 0xff, 0xff, 0x00, 0x41, 0x00,
          0x21, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xbd, 0xdf, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x41, 0x00,
          0x00, 0x41, 0x00, 0x00, 0x41, 0x00, 0x00, 0x41, 0x00, 0x00, 0x41, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x9e, 0x39, 0x00, 0x41, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0x5a, 0xbe, 0x7b, 0x00, 0x41, 0x00, 0x21, 0x41, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0x9c, 0xdf, 0xbd, 0x00, 0x41, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0xff, 0xff,
          0x00, 0x41, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x41, 0x00,
          0x21, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x41, 0x00, 0x21, 0x41, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0x00, 0x41, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0x00, 0x41, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x41, 0x00,
          0x21, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0x00, 0x41, 0x00, 0x21, 0x41, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0x00, 0x41, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

          0x00, 0x20, 0x00, 0x21, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    RED_CHECK_EQUAL(d.size(), 19*32*3);
    RED_CHECK_MEM(d, make_array_view(expected_data, sizeof(expected_data)));

    // Create a simple capture image and dump it to file
//    uint16_t width = 100;
//    uint16_t height = 100;
//    uint16_t bmp_bpp = 24;
//    uint16_t source_bpp = 24;
//    Rect screen_rect(0, 0, width, height);
//    Drawable gd(width, height);
//    Bitmap bmp(bmp_bpp, source_bpp, nullptr, 32, 19, expected_data, sizeof(expected_data), false);
//    gd.mem_blt(screen_rect, bmp, 0, 0);
//    dump_png24("./test_pointer_arrow.png", gd, true);
}


RED_AUTO_TEST_CASE(TestPointerVNC_Color)
{
    uint8_t data[] = {
        /* 0000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
        /* 0010 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
        /* 0020 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 0030 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
        /* 0040 */ 0x00, 0x00, 0x00, 0x00, 0x1a, 0x24, 0xbd, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbd, 0x2c,  // .....$.,.,.,.,.,
        /* 0050 */ 0x1a, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .$..............

        /* 0060 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x1b,  // ..............U.
        /* 0070 */ 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .,.,.,.,.,.,.,.,
        /* 0080 */ 0xbe, 0x2c, 0x55, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,U.............

        /* 0090 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x24, 0xde, 0x2c, 0xbe, 0x2c,  // ..........X$.,.,
        /* 00a0 */ 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .,.,.,.,.,.,.,.,
        /* 00b0 */ 0xbe, 0x2c, 0x55, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,U.............

        /* 00c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x26, 0x1f, 0x26, 0x1e, 0x2d, 0xbe, 0x2c,  // ........?&.&.-.,
        /* 00d0 */ 0xbe, 0x2c, 0x5b, 0x24, 0xb7, 0x23, 0x5b, 0x24, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .,[$.#[$.,.,.,.,
        /* 00e0 */ 0xbe, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,..............

        /* 00f0 */ 0x00, 0x00, 0x00, 0x00, 0x7d, 0x25, 0x7f, 0x26, 0x7f, 0x26, 0x5f, 0x26, 0xdd, 0x24, 0x00, 0x00,  // ....}%.&.&_&.$..
        /* 0100 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .........,.,.,.,
        /* 0110 */ 0x1a, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .$..............

        /* 0120 */ 0x00, 0x00, 0x1f, 0x26, 0x7f, 0x26, 0x7f, 0x26, 0x3f, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ...&.&.&?&......
        /* 0130 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbd, 0x2c,  // .........,.,.,.,
        /* 0140 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 0150 */ 0x7f, 0x26, 0x7f, 0x26, 0x7f, 0x26, 0x9e, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .&.&.&.%........
        /* 0160 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x24, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0x00, 0x00,  // ......[$.,.,.,..
        /* 0170 */ 0x01, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x26,  // .."............&

        /* 0180 */ 0x7f, 0x26, 0x7f, 0x26, 0x1b, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .&.&.%..........
        /* 0190 */ 0x00, 0x00, 0x00, 0x00, 0xb7, 0x23, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0x00, 0x00, 0x01, 0x00,  // .....#.,.,.,....
        /* 01a0 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x26, 0x7f, 0x26,  // .."..........&.&

        /* 01b0 */ 0x7f, 0x26, 0xbe, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .&.%............
        /* 01c0 */ 0x00, 0x00, 0x5b, 0x24, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff,  // ..[$.,.,.,......
        /* 01d0 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25, 0x3f, 0x26, 0x9f, 0x25,  // .."........%?&.%

        /* 01e0 */ 0xfe, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,..............
        /* 01f0 */ 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbd, 0x2c, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,  // .,.,.,.,........
        /* 0200 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x24, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // ..".....z$.,.,.,

        /* 0210 */ 0x9d, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x2c, 0xbe, 0x2c,  // .,...........,.,
        /* 0220 */ 0xbe, 0x2c, 0xbe, 0x2c, 0x1a, 0x24, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  // .,.,.$..........
        /* 0230 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .."......,.,.,.,

        /* 0240 */ 0xbe, 0x2c, 0x5b, 0x24, 0xb7, 0x23, 0x5b, 0x24, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .,[$.#[$.,.,.,.,
        /* 0250 */ 0xbe, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  // .,..............
        /* 0260 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x55, 0x1b, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .."...U..,.,.,.,

        /* 0270 */ 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0x55, 0x1b,  // .,.,.,.,.,.,.,U.
        /* 0280 */ 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  // ................
        /* 0290 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x55, 0x1b, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .."...U..,.,.,.,

        /* 02a0 */ 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c, 0x55, 0x1b, 0x00, 0x00, 0x00, 0x00,  // .,.,.,.,.,U.....
        /* 02b0 */ 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  // ................
        /* 02c0 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x24, 0xbd, 0x2c, 0xbe, 0x2c, 0xbe, 0x2c,  // .."......$.,.,.,

        /* 02d0 */ 0xbe, 0x2c, 0xbd, 0x2c, 0x1a, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,.,.$..........
        /* 02e0 */ 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff,  // ................
        /* 02f0 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..".............

        /* 0300 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ................
        /* 0310 */ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9e, 0xf7,  // ................
        /* 0320 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..".............

        /* 0330 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff,  // ................
        /* 0340 */ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5d, 0xef,  // ..............].
        /* 0350 */ 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..".............

        /* 0360 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,  // ................
        /* 0370 */ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1c, 0xe7,  // ................
        /* 0380 */ 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 0390 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  // ................
        /* 03a0 */ 0xbe, 0xf7, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,  // ................
        /* 03b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 03c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xf7, 0x01, 0x00,  // ................
        /* 03d0 */ 0xb7, 0xb5, 0xff, 0xff, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ......".........
        /* 03e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 03f0 */ 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xbe, 0xf7, 0x01, 0x00, 0x22, 0x00, 0x01, 0x00,  // ............"...
        /* 0400 */ 0xff, 0xff, 0x1c, 0xe7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
        /* 0410 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 0420 */ 0x00, 0x00, 0x01, 0x00, 0xbe, 0xf7, 0x01, 0x00, 0x22, 0x00, 0x00, 0x00, 0x02, 0x00, 0x19, 0xc6,  // ........".......
        /* 0430 */ 0xff, 0xff, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ...."...........
        /* 0440 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 0450 */ 0x02, 0x00, 0x01, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x01, 0x00, 0xff, 0xff,  // ....".....".....
        /* 0460 */ 0xbb, 0xd6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
        /* 0470 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 0480 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xbb, 0xd6, 0xff, 0xff,  // ................
        /* 0490 */ 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
        /* 04a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................

        /* 04b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x01, 0x00, 0x02, 0x00, 0x22, 0x00,  // ........#.....".
        /* 04c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
        /* 04d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                                      // ..........
        };

    uint8_t mask[] = {
        /* 0000 */ 0b00000000, 0b00000000, 0b00000000,
                   0b00000000, 0b00001111, 0b11000000,
                   0b00000000, 0b00111111, 0b11100000,
                   0b00000000, 0b01111111, 0b11110000,
                   0b00000000, 0b11111010, 0b11111000,
                   0b00000001, 0b11110000, 0b01111100,
                   0b00000001, 0b11100000, 0b00111100,
                   0b00000001, 0b11100000, 0b00011100,
                   0b10000001, 0b11000000, 0b00011100,
                   0b11000001, 0b11100000, 0b00111100,
                   0b11100001, 0b11100000, 0b00111100,
                   0b11110001, 0b11110000, 0b01111000,
                   0b11111000, 0b11111101, 0b11111000,
                   0b11111100, 0b01111111, 0b11110000,
                   0b11111110, 0b00111111, 0b11100000,
                   0b11111111, 0b00001111, 0b10000000,
                   0b11111111, 0b10000000, 0b00000000,
                   0b11111111, 0b11000000, 0b00000000,
                   0b11111111, 0b11100000, 0b00000000,
                   0b11111111, 0b11110000, 0b00000000,
                   0b11111111, 0b11010000, 0b00000000,
                   0b11111111, 0b00000000, 0b00000000,
                   0b11110111, 0b10000000, 0b00000000,
                   0b11100111, 0b10000000, 0b00000000,
                   0b11000011, 0b11000000, 0b00000000,
                   0b00000011, 0b11000000, 0b00000000,
                   0b00000001, 0b00000000, 0b00000000,
    };

    std::vector<uint8_t> vncdata(data, sizeof(data) + data);
    std::vector<uint8_t> vncmask(mask, sizeof(mask) + mask);

    Pointer vnccursor(2, CursorSize{23, 27}, Hotspot{0, 8}, vncdata, vncmask, 11, 31, 5, 63, 0, 31, 3, 69);

    // When cursor Size is odd, then the next even width is used and mask is fixed accordingly to avoid some annoying border cases
    RED_CHECK_EQUAL(vnccursor.get_dimensions().width, 32);
    RED_CHECK_EQUAL(vnccursor.get_dimensions().height, 27);
    RED_CHECK_EQUAL(vnccursor.get_hotspot().x, 0);
    RED_CHECK_EQUAL(vnccursor.get_hotspot().y, 8);
    auto d = vnccursor.get_24bits_xor_mask();
    auto m = vnccursor.get_monochrome_and_mask();

    RED_CHECK_EQUAL(m.size(), 27*4);
//    RED_CHECK_MEM(vnccursor.get_monochrome_and_mask(), make_array_view(expected_mask, sizeof(expected_mask)));

    RED_CHECK_EQUAL(d.size(), 32*3*27);
//    RED_CHECK_MEM(d, make_array_view(expected_data, sizeof(expected_data)));

    // Create a simple capture image and dump it to file
//    uint16_t width = 100;
//    uint16_t height = 100;
//    uint16_t bmp_bpp = 24;
//    uint16_t source_bpp = 24;
//    Rect screen_rect(0, 0, width, height);
//    Drawable gd(width, height);
//    Bitmap bmp(bmp_bpp, source_bpp, nullptr, width, height, d.data(), d.size(), false);
//    gd.mem_blt(screen_rect, bmp, 0, 0);
//    dump_png24("./test_pointer_arrow_wait.png", gd, true);

//VNC Cursor(0, 8, 23, 27) 2 16 1242

}

RED_AUTO_TEST_CASE(TestPointerIO)
{
        StaticOutStream<32+108*96> stream;
        Pointer cursor(EditPointer{});

        uint16_t width = cursor.get_dimensions().width;
        uint16_t height = cursor.get_dimensions().height;

        FakeGraphic drawable(24, width, height, 0);
        auto const color_context = gdi::ColorCtx::depth24();
        auto pixel_color = RDPColor::from(PINK);
        Rect rect(0,0,width,height);
        drawable.draw(RDPOpaqueRect(rect, pixel_color), rect, color_context);

        auto av_xor = cursor.get_24bits_xor_mask();
        Bitmap bmp(24, 24, nullptr, width, height, av_xor.data(), av_xor.size(), false);
//        drawable.mem_blt(rect, bmp, 0, 0);
//
//        drawable.save_to_png("./cursor.png");

//        cursor.emit_pointer32x32(payload);
//
//        array_view_const_u8 av = {payload.get_data(), payload.get_offset()};

//    StaticOutStream<8192> result;
//
//    cursor.emit(result);

//    RED_CHECK_MEM(stream_to_avu8(result), make_array_view(data, sizeof(data)));
}

RED_AUTO_TEST_CASE(TestPointer1bit)
{
    const uint8_t mask_data[] = {
/*0000*/ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /*...............*/
/*0010*/ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /*...............*/
/*0020*/ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /*...............*/
/*0030*/ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x23, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, /*........#......*/
/*0040*/ 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, /*...............*/
/*0050*/ 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, /*...............*/
/*0060*/ 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, /*...............*/
/*0070*/ 0xff, 0xdf, 0xff, 0xff, 0xfe, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /*....#..........*/
    };
    const uint8_t data_data[] = {
/*0000*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
/*0010*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
/*0020*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
/*0030*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
/*0040*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
/*0050*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
/*0060*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
/*0070*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
    };

    Pointer cursor(CursorSize{32, 32}, Hotspot{8, 9}, {data_data, sizeof(data_data)}, {mask_data, sizeof(mask_data)}, 1, BGRPalette::classic_332(), true, BogusLinuxCursor::enable, 4, 4);

    ARGB32Pointer vnccursor(cursor);
    const auto av_alpha_q = vnccursor.get_alpha_q();

    const char * sig = "\x87\x96\xcb\x13\x84\xa1\xef\xee\x6a\x81\xec\xcf\xae\xe7\x64\xd8\x3b\xaa\x11\x73";

    RED_CHECK_SIG2(av_alpha_q.data(), av_alpha_q.size(), sig);
}


