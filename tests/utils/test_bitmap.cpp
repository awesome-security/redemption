/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2010
   Author(s): Christophe Grosjean, Javier Caverni, Meng Tan, Raphael Zhou
   Based on xrdp Copyright (C) Jay Sorg 2004-2010

   Unit test for bitmap class (mostly tests of compression/decompression)
*/

#define RED_TEST_MODULE TestBitmap
#include "system/redemption_unit_tests.hpp"

#define LOGNULL
//#define LOGPRINT

#include "utils/bitmap.hpp"
#include "utils/bitmap_from_file.hpp"
#include "utils/drawable.hpp"
#include "test_only/check_sig.hpp"
//#include "test_only/dump_png.hpp"
#include <cstdio>


RED_AUTO_TEST_CASE(TestBitmapCompressHardenned)
{
    const unsigned white = 0xFF;
    const BGRPalette & palette332 = BGRPalette::classic_332();

    // test COLOR COUNT
    {
        RED_CHECK_EQUAL(1,1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();
        RED_CHECK_EQUAL(16, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data(), 0x05));
        RED_CHECK_EQUAL(0, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data(), 0xFE));
    }

    // test COLOR COUNT 2
    {
        RED_CHECK_EQUAL(1,1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x02, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0A, 0x0B, 0x0C,
            0x0D, 0x0E, 0x0F, 0x10};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmax = bmp.data() + bmp.bmp_size();
        RED_CHECK_EQUAL(1, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data(), 0x01));
        RED_CHECK_EQUAL(2, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data() + 1, 0x02));
    }

    // test BICOLOR COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(8, 8, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();
        RED_CHECK_EQUAL(16, bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin, 0x01, 0x05));
        RED_CHECK_EQUAL(14, bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin+1, 0x05, 0x01));
        RED_CHECK_EQUAL(0 , bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin, 0x05, 0x01));
    }

    // test BICOLOR COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();
        RED_CHECK_EQUAL(10, bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin, 0x01, 0x05));
        RED_CHECK_EQUAL(10, bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin + 1, 0x05, 0x01));
    }

    // test FILL COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x00, 0x00, 0x00, 0x00,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();

        // Line above first line is black
        RED_CHECK_EQUAL(4, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()));
        RED_CHECK_EQUAL(3, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+1));

        // 3rd line, compared to 2nd line
        RED_CHECK_EQUAL(3, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+8));
    }

    // test FILL COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x01};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();

        // Line above first line is black
        RED_CHECK_EQUAL(0, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()));
        RED_CHECK_EQUAL(1, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+1));
        RED_CHECK_EQUAL(0, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+2));
        RED_CHECK_EQUAL(2, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+3));

        // until the end
        RED_CHECK_EQUAL(8, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+8));

    }

    // test MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0xFF, 0xFF, 0xFF, 0xFF,
            0x01, 0x05, 0x01, 0x05,
            0xFE, 0xFA, 0xFE, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();

        // Line above first line is black
        RED_CHECK_EQUAL(4, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data(), white));
        RED_CHECK_EQUAL(3, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+1, white));

        // 3rd line, compared to 2nd line
        RED_CHECK_EQUAL(3, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+8, white));
    }

    // test MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0xFF, 0x01, 0xFF,
            0xFE, 0x05, 0x01, 0x01,
            0x01, 0xFA, 0xFE, 0xFE,
            0xFE, 0x05, 0x01, 0x01};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();

        // Line above first line is black
        RED_CHECK_EQUAL(0, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data(), white));
        RED_CHECK_EQUAL(1, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+1, white));
        RED_CHECK_EQUAL(0, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+2, white));
        RED_CHECK_EQUAL(2, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+3, white));

        // until the end
        RED_CHECK_EQUAL(8, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+8, white));
    }

    // test FILL OR MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0x03, 0x04, 0xFA};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();

        // Line above first line is black
        uint8_t masks[512];
        unsigned flags = 0;
        unsigned color = white;
        RED_CHECK_EQUAL(1, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, bmp.data()+15, color, flags));
        RED_CHECK_EQUAL(white, color);
        RED_CHECK_EQUAL(static_cast<unsigned>(Bitmap::FLAG_FILL), flags);
        RED_CHECK_EQUAL(2, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, bmp.data()+14, color, flags));
        RED_CHECK_EQUAL(white, color);
        RED_CHECK_EQUAL(static_cast<unsigned>(Bitmap::FLAG_FOM), flags);
        bmp.get_fom_masks(::nbbytes(bpp), pmin, pmin+14, masks, 2);
        RED_CHECK_EQUAL(0x01, masks[0]);


        RED_CHECK_EQUAL(4, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, bmp.data()+12, color, flags));
        RED_CHECK_EQUAL(white, color);
        RED_CHECK_EQUAL(static_cast<unsigned>(Bitmap::FLAG_FOM), flags);
        bmp.get_fom_masks(::nbbytes(bpp), pmin, pmin+12, masks, 4);
        RED_CHECK_EQUAL(0x07, masks[0]);

        RED_CHECK_EQUAL(5, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, bmp.data()+11, color, flags));
        RED_CHECK_EQUAL(white, color);
        RED_CHECK_EQUAL(static_cast<unsigned>(Bitmap::FLAG_FOM), flags);

        RED_CHECK_EQUAL(6, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, bmp.data()+10, color, flags));
        RED_CHECK_EQUAL(white, color);
        RED_CHECK_EQUAL(static_cast<unsigned>(Bitmap::FLAG_FOM), flags);
        RED_CHECK_EQUAL(12, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, bmp.data()+4, color, flags));
        RED_CHECK_EQUAL(white, color);
        RED_CHECK_EQUAL(static_cast<unsigned>(Bitmap::FLAG_FOM), flags);
        bmp.get_fom_masks(::nbbytes(bpp), pmin, pmin+4, masks, 12);
        RED_CHECK_EQUAL(0xA5, masks[0]);
        RED_CHECK_EQUAL(0x07, masks[1]);
    }

    {
        RED_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0A, 0x0B, 0x0C,
            0x0D, 0x0E, 0x0F, 0x10};
        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();

        unsigned flags = 0;
        const uint8_t * p = bmp.data()+3;
        unsigned foreground = bmp.get_pixel_above(::nbbytes(bpp), pmin, p) ^ bmp.get_pixel(::nbbytes(bpp), p);
        RED_CHECK_EQUAL(0x04, foreground);
        RED_CHECK_EQUAL(3, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, p+nbbytes(bpp), foreground));
        foreground = white;
        RED_CHECK_EQUAL(4, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, p, foreground, flags));
        RED_CHECK_EQUAL(0x04, foreground);
        RED_CHECK_EQUAL(static_cast<unsigned>(Bitmap::FLAG_MIX), flags);
    }


    {
        RED_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t multicolor[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x05, 0x06, 0x07, 0x08,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, multicolor, sizeof(multicolor));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size();
        const uint8_t * p = bmp.data()+3;

        unsigned foreground = bmp.get_pixel_above(::nbbytes(bpp), pmin, p) ^ bmp.get_pixel(::nbbytes(bpp), p);
        RED_CHECK_EQUAL(4, foreground);
        RED_CHECK_EQUAL(0, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, p+nbbytes(bpp), foreground));
        foreground = white;
        unsigned flags = 0;
        RED_CHECK_EQUAL(2, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, p, foreground, flags));
        RED_CHECK_EQUAL(4, foreground);
        RED_CHECK_EQUAL(static_cast<unsigned>(Bitmap::FLAG_FOM), flags); // MIX then FILL
    }
}

RED_AUTO_TEST_CASE(TestBitmapCompress)
{
    BGRPalette const & palette332 = BGRPalette::classic_332();

    // test COPY
    {
        RED_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x06, 0x07, 0x08, 0x09,
            0x0A, 0x0C, 0x0D, 0x0E,
            0x0F, 0x10, 0x12, 0x13};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));

        StaticOutStream<256> out;
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04,
            0x8c, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x12, 0x13
        };


        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, bpp, &palette332, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompress ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }

    // test COPY 16 bits
    {
        int bpp = 16;
        uint8_t data[4*4*2] = {
            0x01, 0, 0x02, 0, 0x03, 0, 0x04, 0,
            0x05, 0, 0x06, 0, 0x07, 0, 0x08, 0,
            0x09, 0, 0x0A, 0, 0x0B, 0, 0x0C, 0,
            0x0D, 0, 0x0E, 0, 0x0F, 0, 0x10, 0};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, bpp, nullptr, 4, 4, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00,
            0xc3, 0x04, 0x00, // 4 COPY
            0xc4, 0x0c, 0x00, // 4 MIX SET
            0xc4, 0x04, 0x00, // 4 MIX SET
            0x81, 0x10, 0x00, // 1 COPY
        };


        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        // empty set to 0,0,0,0,0,0,...
        Bitmap bmp2(16, 16, nullptr, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test COLOR
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04, // 4 COPY
            0x6c, 0x01, // 12 COLOR (01)
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

        Bitmap bmp2(bpp, bpp, &palette332, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

    }

    // test COLOR then COPY
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x0F};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0xC4, 0x01, // 4 MIX SET (01)
            0x0b, // 11 FILL
            0x81, 0x0f, // 1 COPY
        };

        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

        Bitmap bmp2(bpp, bpp, &palette332, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));
    }

    // test interleaved COLOR and COPY
    {
        RED_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x05, 0x06, 0x07, 0x08,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04, // COPY
            0x64, 0x01,                   // COLOR
            0x84, 0x05, 0x06, 0x07, 0x08, // COPY
            0x64, 0x01                    // COLOR
        };

        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

        Bitmap bmp2(bpp, bpp, &palette332, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test BICOLOR
    {
        int bpp = 8;
        uint8_t data[24] = {
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,

        };

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, bpp, &palette332, 24, 1, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0xeC, 0x01, 0x02 // BICOLOR
        };
        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, bpp, &palette332, 24, 1, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test FILL
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x0c, // 12 FILL
        };
        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

        Bitmap bmp2(bpp, bpp, &palette332, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));
    }

    // test MIX
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA};

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x2c, // 12 MIX
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

        Bitmap bmp2(bpp, bpp, &palette332, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));
    }


    // test FOM
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x03, 0x03, 0x03, 0x03};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05,
            0x41, 0xa5, // 8 FOM 0b10100101
            0x64, 0x03, // 4 COLOR
        };

        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, bpp, &palette332, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test FOM 2
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0xFC, 0x04, 0xFA};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, bpp, &palette332, 4, 4, data, sizeof(data));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x40, 0x0b, 0xa5, 0x05, // 11 FILL or MIX
        };
        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, bpp, &palette332, 4, 4, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x40, 0x08, 0x33,                               // 9 FOM 9
            0x0f, 0x66, 0xbb,                               // 15 FILL
            0xd6, 0x62, 0x00, 0x00, 0x40, 0x09, 0x99, 0x00, // 48 FOM SET
            0x66, 0xbb,                                     // 6 COLOR
            0xd6, 0xd0, 0x04, 0xbb, 0xd6, 0x0c, 0x81, 0x00, // 48 FOM SET
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(1);
        Bitmap bmp2(bpp, bpp, &palette332, 256, 3, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }


    {
        int bpp = 16;
        uint8_t raw[] = {
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
        };


        uint8_t compressed[] = {
            // BICOLOR 274 pairs = 548 pixels
            0xf8, 0x12, 0x01, 0x10, 0xe5, 0xef, 0x1a,
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(1);
        Bitmap bmp2(bpp, bpp, &palette332, 548, 1, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(raw));
        RED_CHECK(0 == memcmp(bmp2.data(), raw, sizeof(raw)));

    }


    {
        uint8_t raw[] = {
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
        };


        uint8_t compressed[] = {
            // BICOLOR 274 pairs = 548 pixels
            0xf8, 0x12, 0x01, 0x10, 0xe5, 0xef, 0x1a,
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(1);
        Bitmap bmp2(16, 16, &palette332, 548, 1, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data_co[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(raw));
        RED_CHECK(0 == memcmp(bmp2.data(), raw, sizeof(raw)));

    }


    // functional test , 24 bits, various orders with SET variants
    {
        int bpp = 24;
        uint8_t raw[2*16*3] = {
        0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,
        0x07, 0x07, 0x8e,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0xc8, 0x2a, 0x0a,  0xea, 0x31, 0x0c,  0xea, 0x31, 0x0c,

        0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x09, 0x09, 0xbe,
        0x00, 0x00, 0x0b,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x9f, 0x21, 0x08,  0xea, 0x31, 0x0c,  0xea, 0x31, 0x0c
        };


//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(raw); i++){
//            printf("%.2x ", raw[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");


        Bitmap bmp(bpp, bpp, &palette332, 16, 2, raw, sizeof(raw));
        StaticOutStream<256> out;
        bmp.compress(bpp, out);

        uint8_t expected[] = {
            0xc4, 0x0c, 0x0c, 0xea,                   // 4 MIX SET 0xea0c0c
            0xd0, 0x08, 0x07, 0x07, 0x8e, 0x01, 0x00, // 9 FOM SET 0x8e0707 0b00000001 0b00000000
            0x81, 0xc8, 0x2a, 0x0a,                   // 1 COPY 0x0a2ac8

//            0xd0, 0x04, 0xea, 0x31, 0x0c, 0x03,       // 5 FOM SET 0x0C31EA 0b00000011
            0xC2, 0xEA, 0x31, 0x0C,                   // 2 MIX SET 0x0C31EA
            0x03,                                     // 3 FILL

            0x81, 0x09, 0x09, 0xbe,                   // 1 COPY 0xbe0909
            0xd0, 0x08, 0x07, 0x07, 0x85, 0x01, 0x00, // 9 FOM SET 0xB0000^0x8e0707 0b00000001 0b00000000
            0xd0, 0x02, 0x57, 0x0b, 0x02, 0x01        // 3 FOM SET 0x08219F 0b00000001
        };

// c2 ea 31 0c 03

        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, bpp, &palette332, 16, 2, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(raw));
        RED_CHECK(0 == memcmp(bmp2.data(), raw, sizeof(raw)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // FOM SET 16px Mix 0x0842 MASK 0x00, 00
            0xd0, 0x0F, 0x08, 0x42, 0x0F, 0x0F,
            // COPY 4px
            0x81, 0x01, 0x02
        };

        Bitmap bmp(bpp, bpp, &palette332, 64, 10, compressed, 9, true);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x02
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size(); i++){
//            printf("%.2x ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // 1_COPY 31_FILL 1_MIX 31_FILL
            // the mix is magically inserted because we have 2 back to back FILL
            // on the first scanline (don't ask why. See RDPBCGR 2.2.9.1.1.3.1.2.4
            // Background Run Orders).
            0x82, 0x01, 0x02, 0x03, 0x04, 0x1F, 0x1F,
            0x00, 0x20, // FILL 64
        };

        Bitmap bmp(bpp, bpp, &palette332, 64, 2, compressed, sizeof(compressed), true);

        uint8_t expected[64*2*2] = {
            0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

            0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size(); i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK_EQUAL(bmp.bmp_size(), sizeof(expected));
        RED_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }

    // Test for magic mix pixel on first line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x02, 0x02
        };

        Bitmap bmp(bpp, bpp, &palette332, 4, 1, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0xff, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size(); i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x04
        };

        Bitmap bmp(bpp, bpp, &palette332, 4, 2, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size(); i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    // Magic pixel after first line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x04, 0x04
        };

        Bitmap bmp(bpp, bpp, &palette332, 4, 3, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0xFF, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size(); i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    // Magic pixel after first line, not necessarilly at beginning of a line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x06, 0x02
        };

        Bitmap bmp(bpp, bpp, &palette332, 4, 3, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xFF, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size(); i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // FOM (24 * 8) pix
            0x58, 0x01, 0x01, 0x01, 0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x0f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0xb0, 0x01, 0x01,
            0x82, 0x01, 0x02, 0x03, 0x04
        };

        Bitmap bmp(bpp, bpp, &palette332, 288, 13, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x02, 0x03, 0x04,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size(); i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


//    {
//        uint8_t compressed[] = {
//            0x22,
//            0x60, 0x20, 0x17, 0xc6,
//            0xc0, 0x30, 0xcd, 0x18, // MIX_SET
//            0xd0, 0x01, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
//            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xf3, 0x40, 0x0d, 0x00, 0x00,
//        };

//        Bitmap bmp(16, 16, &palette332, 64, 54, compressed, sizeof(compressed), true);

//    }

    {
        int bpp = 16;
        RED_CHECK(1);

        uint8_t uncompressed[] = {
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,

        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,


        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x4e, 0xe1, 0x22,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x61, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xe2, 0x2b, 0x43, 0x57,
        0xa3, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x43, 0x57,
        0x03, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
        0xc3, 0x56, 0x43, 0x57, 0x03, 0x57, 0x23, 0x4e, 0x62, 0x34, 0x40, 0x09, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x80, 0x11, 0xa2, 0x3c, 0x63, 0x4e, 0x23, 0x57, 0x03, 0x57, 0x03, 0x46, 0x22, 0x34,
        0x60, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x1a, 0xc3, 0x45, 0x23, 0x57,
        0x23, 0x57, 0xe3, 0x45, 0xa1, 0x1a, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x45,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x23, 0x57, 0x61, 0x1a, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x41, 0x2b, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1a, 0x43, 0x57,
        0xa0, 0x08, 0x20, 0x00, 0x20, 0x00, 0x60, 0x11, 0xc2, 0x3c, 0x43, 0x57, 0x63, 0x4e, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x11,
        0x43, 0x57, 0x03, 0x57, 0x61, 0x2b, 0xe0, 0x08, 0x20, 0x00, 0x40, 0x00, 0x60, 0x11, 0x41, 0x2b,
        0xe3, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x4e, 0x43, 0x57, 0x02, 0x2c, 0xa0, 0x08,
        0x00, 0x00, 0xa0, 0x08, 0x01, 0x23, 0xc3, 0x56, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x34, 0x43, 0x57,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x43, 0x57, 0x23, 0x57, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3d,
        0x43, 0x57, 0x61, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x57, 0x43, 0x57, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x1a, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e, 0x43, 0x57,
        0x00, 0x00, 0x40, 0x00, 0x40, 0x11, 0xe1, 0x22, 0xe3, 0x45, 0x43, 0x57, 0xc3, 0x45, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x56,
        0x03, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x45, 0x43, 0x57, 0xc2, 0x3c, 0x80, 0x11,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x57, 0x43, 0x57,
        0xc3, 0x56, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x03, 0x57, 0xc0, 0x11, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x11, 0x23, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x83, 0x4e, 0xa3, 0x45, 0x02, 0x34, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x56,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x23, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x09, 0x62, 0x34, 0x23, 0x4e,
        0x03, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x56, 0x43, 0x57,
        0x20, 0x09, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x3d,
        0x43, 0x57, 0x40, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x08, 0x43, 0x57,
        0x43, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x43, 0x57, 0xc3, 0x56, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0xe1, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x40, 0x11, 0x43, 0x57, 0xa3, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e, 0x43, 0x57,
        0xe0, 0x08, 0x20, 0x00, 0x20, 0x00, 0x00, 0x09, 0xe1, 0x22, 0xa3, 0x45, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x11,
        0x43, 0x57, 0x63, 0x4e, 0x41, 0x1a, 0x60, 0x00, 0x20, 0x00, 0x60, 0x11, 0x82, 0x45, 0x43, 0x57,
        0x02, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x45, 0x01, 0x23, 0x20, 0x09,
        0x20, 0x00, 0x20, 0x00, 0x20, 0x09, 0xe2, 0x3c, 0x43, 0x57, 0x42, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0xc3, 0x56, 0x01, 0x23, 0x80, 0x00, 0x20, 0x00, 0x60, 0x11,
        0xc3, 0x45, 0x43, 0x57, 0x02, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x34, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xa1, 0x2b, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x23, 0x4e,
        0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0xc3, 0x56, 0x40, 0x11, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x41, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x23, 0x57, 0x80, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x1a, 0x43, 0x57,
        0x83, 0x4e, 0x23, 0x57, 0x23, 0x57, 0x43, 0x4e, 0x62, 0x34, 0xa0, 0x11, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x1a, 0x42, 0x3d, 0xc3, 0x56, 0x23, 0x57, 0x63, 0x4e, 0x02, 0x34, 0x60, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x11, 0x22, 0x34, 0x03, 0x4e,
        0x03, 0x57, 0x03, 0x57, 0x43, 0x4e, 0x42, 0x34, 0xe0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x61, 0x1a, 0xc3, 0x45, 0x23, 0x57, 0x03, 0x57,
        0x82, 0x45, 0xc1, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x11,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x4e, 0xe1, 0x22,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };


//        uint8_t compressed[] = {
//0xc0, 0x30, 0x1d, 0x99, 0xf0, 0x40, 0x01, 0x82, 0xa6, 0x31, 0xa6, 0x39, 0xc3, 0xbb, 0xa8, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x22, 0x60, 0x20, 0x17, 0xc6, 0xc0,
//0x30, 0xcd, 0x18, 0xd0, 0x7f, 0x01, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
//0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xf3, 0xcb, 0x06, 0x00, 0x00, 0xc3, 0x43, 0x57, 0x82,
//0x43, 0x4e, 0xe1, 0x22, 0x00, 0x1e, 0x62, 0x43, 0x57, 0x81, 0x61, 0x1a, 0x60, 0x1c, 0x00, 0x00,
//0x84, 0x20, 0x00, 0xe2, 0x2b, 0x43, 0x57, 0xa3, 0x45, 0x60, 0x1d, 0x00, 0x00, 0xd0, 0x01, 0x62,
//0x2b, 0x01, 0x81, 0x03, 0x57, 0x00, 0x0e, 0x86, 0x00, 0x09, 0xc3, 0x56, 0x43, 0x57, 0x03, 0x57,
//0x23, 0x4e, 0x62, 0x34, 0xd0, 0x08, 0x40, 0x09, 0x01, 0x00, 0xd0, 0x01, 0x80, 0x00, 0x01, 0xd0,
//0x08, 0x40, 0x00, 0x01, 0x00, 0x87, 0x80, 0x11, 0xa2, 0x3c, 0x63, 0x4e, 0x23, 0x57, 0x03, 0x57,
//0x03, 0x46, 0x22, 0x34, 0xd0, 0x04, 0x60, 0x11, 0x01, 0x82, 0x81, 0x1a, 0xc3, 0x45, 0xc2, 0x23,
//0x57, 0x83, 0xe3, 0x45, 0xa1, 0x1a, 0x00, 0x00, 0xd0, 0x12, 0x43, 0x57, 0x63, 0x60, 0x00, 0x81,
//0xa3, 0x45, 0x65, 0x43, 0x57, 0x82, 0x23, 0x57, 0x61, 0x1a, 0x11, 0x81, 0x41, 0x23, 0x68, 0x43,
//0x57, 0x03, 0x81, 0x01, 0x23, 0x66, 0x43, 0x57, 0x81, 0x41, 0x2b, 0x12, 0x83, 0x01, 0x1a, 0x43,
//0x57, 0xa0, 0x08, 0xc2, 0x63, 0x57, 0x84, 0x60, 0x11, 0xc2, 0x3c, 0x43, 0x57, 0x63, 0x4e, 0x10,
//0x85, 0xc1, 0x11, 0x43, 0x57, 0x03, 0x57, 0x61, 0x2b, 0xe0, 0x08, 0x21, 0x83, 0x40, 0x00, 0x60,
//0x11, 0x41, 0x2b, 0xd0, 0x03, 0xa0, 0x12, 0x01, 0xd0, 0x01, 0x62, 0x6d, 0x01, 0x86, 0x02, 0x2c,
//0xa0, 0x08, 0x00, 0x00, 0xa0, 0x08, 0x01, 0x23, 0xc3, 0x56, 0x12, 0xd0, 0x01, 0x83, 0x2e, 0x01,
//0x64, 0x00, 0x00, 0xd0, 0x01, 0x42, 0x3c, 0x01, 0x81, 0x23, 0x57, 0x10, 0xd0, 0x01, 0xc3, 0x2c,
//0x01, 0x81, 0x61, 0x1a, 0x6a, 0x00, 0x00, 0xd0, 0x01, 0x40, 0x19, 0x01, 0x81, 0x40, 0x00, 0x64,
//0x00, 0x00, 0x81, 0x61, 0x1a, 0x12, 0xd0, 0x02, 0xa1, 0x7a, 0x01, 0x86, 0x40, 0x00, 0x40, 0x11,
//0xe1, 0x22, 0xe3, 0x45, 0x43, 0x57, 0xc3, 0x45, 0x10, 0x82, 0xc3, 0x56, 0x03, 0x57, 0x6b, 0x00,
//0x00, 0xd0, 0x01, 0xc0, 0x12, 0x01, 0x82, 0xc2, 0x3c, 0x80, 0x11, 0xd0, 0x02, 0x40, 0x00, 0x01,
//0x81, 0x20, 0x00, 0x12, 0xd0, 0x01, 0x20, 0x19, 0x01, 0x81, 0xc3, 0x56, 0x64, 0x43, 0x57, 0x82,
//0x03, 0x57, 0xc0, 0x11, 0x10, 0x81, 0x23, 0x57, 0x69, 0x43, 0x57, 0x03, 0x82, 0xe1, 0x11, 0x23,
//0x57, 0x68, 0x43, 0x57, 0x10, 0x64, 0x43, 0x57, 0x84, 0x83, 0x4e, 0xa3, 0x45, 0x02, 0x34, 0x00,
//0x09, 0x69, 0x00, 0x00, 0x08, 0xd0, 0x08, 0xe0, 0x01, 0x01, 0x00, 0xd0, 0x03, 0x60, 0x00, 0x01,
//0x85, 0x00, 0x00, 0x20, 0x09, 0x62, 0x34, 0x23, 0x4e, 0x03, 0x57, 0x0a, 0x81, 0x80, 0x00, 0x0a,
//0xd0, 0x01, 0xa0, 0x01, 0x01, 0x82, 0x20, 0x09, 0x20, 0x00, 0x6d, 0x00, 0x00, 0x08, 0xd0, 0x01,
//0xe1, 0x6b, 0x01, 0x81, 0x40, 0x11, 0xc4, 0x43, 0x57, 0xd0, 0x01, 0x83, 0x5f, 0x01, 0xd0, 0x04,
//0x60, 0x19, 0x01, 0x66, 0x00, 0x00, 0xd0, 0x01, 0x23, 0x57, 0x01, 0xd0, 0x05, 0x80, 0x01, 0x01,
//0xd0, 0x04, 0x61, 0x22, 0x01, 0xd0, 0x01, 0x40, 0x11, 0x01, 0xd0, 0x03, 0xe0, 0x19, 0x01, 0xd0,
//0x01, 0xc0, 0x18, 0x01, 0xd0, 0x01, 0xc0, 0x01, 0x01, 0x84, 0x20, 0x00, 0x00, 0x09, 0xe1, 0x22,
//0xa3, 0x45, 0x11, 0xd0, 0x01, 0xc3, 0x2c, 0x01, 0x87, 0x63, 0x4e, 0x41, 0x1a, 0x60, 0x00, 0x20,
//0x00, 0x60, 0x11, 0x82, 0x45, 0x43, 0x57, 0xd0, 0x04, 0x41, 0x62, 0x01, 0x83, 0xc3, 0x45, 0x01,
//0x23, 0x20, 0x09, 0xc2, 0x20, 0x00, 0x83, 0x20, 0x09, 0xe2, 0x3c, 0x43, 0x57, 0xd0, 0x05, 0x81,
//0x6b, 0x01, 0x87, 0xc3, 0x56, 0x01, 0x23, 0x80, 0x00, 0x20, 0x00, 0x60, 0x11, 0xc3, 0x45, 0x43,
//0x57, 0xd0, 0x03, 0xa1, 0x73, 0x01, 0xd0, 0x01, 0x81, 0x7a, 0x01, 0x66, 0x43, 0x57, 0x06, 0xd0,
//0x0a, 0x43, 0x57, 0x07, 0x00, 0x82, 0x00, 0x00, 0xa1, 0x2b, 0x66, 0x43, 0x57, 0x81, 0x23, 0x4e,
//0xd0, 0x04, 0x62, 0x2c, 0x01, 0x67, 0x43, 0x57, 0x81, 0xc3, 0x56, 0xd0, 0x05, 0x02, 0x2c, 0x01,
//0x81, 0x41, 0x23, 0x65, 0x43, 0x57, 0x81, 0x23, 0x57, 0xd0, 0x03, 0x82, 0x2c, 0x01, 0xd0, 0x01,
//0xe3, 0x2e, 0x01, 0x81, 0x83, 0x4e, 0xc2, 0x60, 0x00, 0x83, 0x43, 0x4e, 0x62, 0x34, 0xa0, 0x11,
//0x12, 0x84, 0x00, 0x00, 0x01, 0x1a, 0x42, 0x3d, 0xc3, 0x56, 0x21, 0x83, 0x63, 0x4e, 0x02, 0x34,
//0x60, 0x00, 0x40, 0x04, 0x01, 0x83, 0x80, 0x11, 0x22, 0x34, 0x03, 0x4e, 0xc2, 0x40, 0x00, 0x83,
//0x43, 0x4e, 0x42, 0x34, 0xe0, 0x08, 0xd0, 0x05, 0x40, 0x11, 0x01, 0x87, 0x00, 0x00, 0x61, 0x1a,
//0xc3, 0x45, 0x23, 0x57, 0x03, 0x57, 0x82, 0x45, 0xc1, 0x11, 0x65, 0x00, 0x00, 0x81, 0x23, 0x4e,
//0x60, 0x1f, 0x00, 0x00, 0x81, 0x80, 0x11, 0x60, 0x6f, 0x00, 0x00, 0xc2, 0x43, 0x57, 0x00, 0x5e,
//0xf3, 0x3c, 0x01, 0x00, 0x00, 0x23, 0x82, 0x43, 0x4e, 0xe1, 0x22, 0x00, 0x10,
//        };


        Bitmap bmp(bpp, bpp, &palette332, 64, 64, uncompressed, sizeof(uncompressed));

        StaticOutStream<8192> out;
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data) ; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");


        RED_CHECK(2);

        Bitmap bmp2(bpp, bpp, &palette332, 64, 64, out.get_data(), (out.get_offset()), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < 8192 ; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK_EQUAL(0, memcmp(bmp2.data(), bmp.data(), 8192));
    }

    {
        int bpp = 24;
        uint8_t data[64*64*3] = {
            /* line 63 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 62 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 61 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 60 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 59 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 58 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 57 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 56 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 55 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,


            /* line 54 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 53 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 52 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 51 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 50 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 49 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 48 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 47 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 46 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 45 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 44 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 43 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 42 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 41 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 40 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 39 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 38 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 37 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 36 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 35 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 34 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 33 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 32 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 31 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 30 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 29 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 28 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 27 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 26 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 25 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 24 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 23 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 22 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 21 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 20 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 19 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 18 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 17 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 16 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 15 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 14 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 13 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 12 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 11 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 10 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 09 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 08 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 07 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 06 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 05 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 04 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 03 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 02 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 01 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 00 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
        };

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, bpp, nullptr, 64, 64, data, sizeof(data));
        StaticOutStream<12288> out;
        bmp.compress(bpp, out);
        // 64x64 24 bits RED Block
        uint8_t expected[] = {
            0xc0, 0x30, 0xff, 0x00, 0x00, 0xf0, 0xc0, 0x0f,
        };


        RED_CHECK_EQUAL(sizeof(expected), out.get_offset());
        RED_CHECK(0 == memcmp(out.get_data(), expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        // empty set to 0,0,0,0,0,0,...
        Bitmap bmp2(bpp, bpp, nullptr, 64, 64, out.get_data(), out.get_offset(), true);
        RED_CHECK_EQUAL(bmp2.bmp_size(), sizeof(data));
        RED_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size(); i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }

    {
        uint8_t bpp = 8;

        uint8_t compressed[] ={
// DUMP OUPUT: cx=192 cy=18 line_width=192 bmp_size=3456
// MIX SET 189 000007
0xc0, 0xad, 0x07,
// LINE 17
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// COPY 3
0x83, 0x00, 0x00, 0x00,
// NEW                                                                               0x00, 0x00, 0x00,

// FILL 578
0xf0, 0x42, 0x02,
// LINE 13
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 15

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 14

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 13

// NEW 0x07, 0x07,

// FOM SET 312 000248 [0f] 1111 0000 [3e] 0111 1100 [84] 0010 0001 [c7] 1110 0011 [60] 0000 0110 [7c] 0011 1110 [86] 0110 0001 [07] 1110 0000 [f8] 0001 1111 [3c] 0011 1100 [e0] 0000 0111 [78] 0001 1110 [1c] 0011 1000 [c7] 1110 0011 [3c] 0011 1100 [66] 0110 0110 [c0] 0000 0011 [18] 0001 1000 [66] 0110 0110 [c6] 0110 0011 [e7] 1110 0111 [21] 1000 0100 [c2] 0100 0011 [81] 1000 0001 [16] 0110 1000 [0d] 1011 0000 [4a] 0101 0010 [0b] 1101 0000 [50] 0000 1010 [1a] 0101 1000 [40] 0000 0010 [0b] 1101 0000 [34] 0010 1100 [5a] 0101 1010 [50] 0000 1010 [b5] 1010 1101 [aa] 0101 0101 [0a] 0101 0000 [5a] 0101 1010
0xf7, 0x38, 0x01, 0xf8, 0x0f, 0x3e, 0x84, 0xc7, 0x60, 0x7c, 0x86, 0x07, 0xf8, 0x3c, 0xe0, 0x78, 0x1c, 0xc7, 0x3c, 0x66, 0xc0, 0x18, 0x66, 0xc6, 0xe7, 0x21, 0xc2, 0x81, 0x16, 0x0d, 0x4a, 0x0b, 0x50, 0x1a, 0x40, 0x0b, 0x34, 0x5a, 0x50, 0xb5, 0xaa, 0x0a, 0x5a,
// NEW             0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff,
// NEW 0x07, 0x07, 0x07, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 12

// NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

// FILL 37
0x00, 0x05,
// NEW                                                             0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,

// FOM 64 [8d] 1011 0001 [96] 0110 1001 [2a] 0101 0100 [15] 1010 1000 [4a] 0101 0010 [01] 1000 0000 [00] 0000 0000 [60] 0000 0110
0x48, 0x8d, 0x96, 0x2a, 0x15, 0x4a, 0x01, 0x00, 0x60,
// NEW                                                                                           0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
// LINE 11

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,

// FILL 29
0x1d,
// NEW                                                                                           0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,

// COLOR 8 000007
0x68, 0x07,
// NEW                                                                         0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07,

// FILL 11
0x0b,
// NEW                         0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,

// COLOR 10 000007
0x6a, 0x07,
// NEW                                                                                           0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FILL 7
0x07,
// NEW                                                       0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,

// COLOR 6 000007
0x66, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FOM 16 [18] 0001 1000 [00] 0000 0000
0x42, 0x18, 0x00,
// NEW                                     0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,

// FILL 20
0x14,
// NEW                                     0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff,

// SPECIAL_FGBG_1 8 [07] 1110 0000
0xfa,
// NEW                                                             0xff, 0xff, 0xff, 0xff, 0xff, 0x07,
// NEW 0x07, 0x07,

// FILL 37
0x00, 0x05,
// NEW             0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07,

// FOM 40 [03] 1100 0000 [00] 0000 0000 [00] 0000 0000 [a8] 0001 0101 [78] 0001 1110
0x45, 0x03, 0x00, 0x00, 0xa8, 0x78,
// NEW                                           0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
// LINE 10

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07,

// FILL 27
0x1b,
// NEW                                                                                           0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,

// FOM 88 [0f] 1111 0000 [00] 0000 0000 [78] 0001 1110 [60] 0000 0110 [f1] 1000 1111 [2c] 0011 0100 [0b] 1101 0000 [00] 0000 0000 [00] 0000 0000 [80] 0000 0001 [08] 0001 0000
0x4b, 0x0f, 0x00, 0x78, 0x60, 0xf1, 0x2c, 0x0b, 0x00, 0x00, 0x80, 0x08,
// NEW                                                             0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
// NEW 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0xff, 0x07,
// NEW 0x07, 0x07,

// FILL 27
0x1b,
// NEW             0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

// FOM 16 [45] 1010 0010 [59] 1001 1010
0x42, 0x45, 0x59,
// NEW                                                                               0xff, 0xff, 0x07,
// NEW 0xff, 0x07, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07,

// FILL 29
0x1d,
// NEW                                                                               0x00, 0x00, 0x00,
// LINE 9

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff,

// SPECIAL_FGBG_2 8 [03] 1100 0000
0xf9,
// NEW                                                             0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff,

// FILL 24
0x18,
// NEW             0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,

// FOM 88 [03] 1100 0000 [00] 0000 0000 [18] 0001 1000 [d0] 0000 1011 [30] 0000 1100 [9a] 0101 1001 [06] 0110 0000 [00] 0000 0000 [00] 0000 0000 [20] 0000 0100 [20] 0000 0100
0x4b, 0x03, 0x00, 0x18, 0xd0, 0x30, 0x9a, 0x06, 0x00, 0x00, 0x20, 0x20,
// NEW                                                             0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07,

// FILL 31
0x1f,
// NEW             0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
// NEW 0xff,

// FILL 6 MAGIC MIX
0x06,
// NEW       0xff, 0xff, 0x07, 0xff, 0xff, 0x07,

// FOM 8 [0d] 1011 0000
0x41, 0x0d,
// NEW                                           0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00,

// FILL 36
0x00, 0x04,
// NEW                                                                                           0x00,
// LINE 8

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07,

// FILL 19 MAGIC MIX
0x13,
// NEW                   0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

// FOM 8 [01] 1000 0000
0x41, 0x01,
// NEW                                     0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,

// FILL 27
0x1b,
// NEW                                                                                     0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07,

// FOM 24 [03] 1100 0000 [60] 0000 0110 [18] 0001 1000
0x43, 0x03, 0x60, 0x18,
// NEW                                                       0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff,

// FILL 73
0x00, 0x29,
// NEW       0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
// NEW 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,

// FOM 400 [03] 1100 0000 [00] 0000 0000 [80] 0000 0001 [6a] 0101 0110 [0b] 1101 0000 [49] 1001 0010 [00] 0000 0000 [48] 0001 0010 [0b] 1101 0000 [34] 0010 1100 [5a] 0101 1010 [50] 0000 1010 [b5] 1010 1101 [aa] 0101 0101 [2a] 0101 0100 [5a] 0101 1010 [5c] 0011 1010 [00] 0000 0000 [02] 0100 0000 [c1] 1000 0011 [a5] 1010 0101 [d1] 1000 1011 [56] 0110 1010 [b5] 1010 1101 [02] 0100 0000 [00] 0000 0000 [b3] 1100 1101 [b1] 1000 1101 [c7] 1110 0011 [4b] 1101 0010 [66] 0110 0110 [9e] 0111 1001 [07] 1110 0000 [38] 0001 1100 [3c] 0011 1100 [e0] 0000 0111 [78] 0001 1110 [1c] 0011 1000 [e7] 1110 0111 [3c] 0011 1100 [3a] 0101 1100 [00] 0000 0000 [00] 0000 0000 [a7] 1110 0101 [c3] 1100 0011 [e1] 1000 0111 [8d] 1011 0001 [d8] 0001 1011 [41] 1000 0010 [29] 1001 0100
0xf2, 0x90, 0x01, 0x03, 0x00, 0x80, 0x6a, 0x0b, 0x49, 0x00, 0x48, 0x0b, 0x34, 0x5a, 0x50, 0xb5, 0xaa, 0x2a, 0x5a, 0x5c, 0x00, 0x02, 0xc1, 0xa5, 0xd1, 0x56, 0xb5, 0x02, 0x00, 0xb3, 0xb1, 0xc7, 0x4b, 0x66, 0x9e, 0x07, 0x38, 0x3c, 0xe0, 0x78, 0x1c, 0xe7, 0x3c, 0x3a, 0x00, 0x00, 0xa7, 0xc3, 0xe1, 0x8d, 0xd8, 0x41, 0x29,
// NEW                                                             0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
// LINE 7

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0xff, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0x07, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 6

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0xff, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 5

// NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,

// FILL 102
0x00, 0x46,
// NEW                                                             0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FOM 40 [03] 1100 0000 [00] 0000 0000 [40] 0000 0010 [55] 1010 1010 [19] 1001 1000
0x45, 0x03, 0x00, 0x40, 0x55, 0x19,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,

// FILL 41
0x00, 0x09,
// NEW                                                 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 4

// NEW 0x07,

// FOM 8 [2d] 1011 0100
0x41, 0x2d,
// NEW       0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,

// FILL 29
0x1d,
// NEW                                                       0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// COLOR 34 000007
0x60, 0x02, 0x07,
// NEW                                     0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FILL 122
0x00, 0x5a,
// NEW                                                 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 3

// NEW 0x07, 0x07,

// COLOR 187 000007
0x60, 0x9b, 0x07,
// NEW             0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FILL 579
0xf0, 0x43, 0x02,
// NEW                                                                               0x00, 0x00, 0x00,
// LINE 2

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 1

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 0

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
        };

        Bitmap bmp2(bpp, bpp, &palette332, 192, 18, compressed, sizeof(compressed), true);
//        bmp2.dump_decompress(bpp, compressed, sizeof(compressed));

        auto const hash = bmp2.get_hash();
//        hexdump_d(sha1, sizeof(sha1));
        RED_CHECK_EQUAL(hash, 8807412648133434373);
//        printf("------- Decompressed ---------\n");
//        for (size_t i = 0; i < bmp2.bmp_size() ; i++){
//            if (i % 192 == 0) printf("\n");
//            printf("%c", (bmp2.data()[i]==0xFF)?'O':'.');
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

// BOGUS VERSION, BEFORE FIXING SPECIAL_FGBG_1 and FIXING SPECIAL_FGBG_2
//00_.............................................................................................................................................................................................
//01_.............................................................................................................................................................................................
//02_.............................................................................................................................................................................................
//03_.............................................................................................................................................................................................
//04_..OOOO.....................OO...........................................OO......................................OO....................OO....O..OO..OO..............OO........................
//05_.OO..OO....................OO.........OO................................OO......................................OO....................OO....O..OO..OO..............OO........................
//06_OO....OO...................OO.........OO................................OO.............................................................OO.O...OO...................OO........................
//07_OO....OO..OO..OO.OO...OO.OO.....OOOO.OOOO..OO..OO..OOOO..OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO..OOO..OOOO...O.OOO.......OO.O...OO..OOO..O.OOO....OOOOO..OOOO.OO...O...OO.OOO..
//08_OO....OO..OO..OO..OO.OO.OO.O.O..OO.O..OO...OO..OO..OO.O.OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO......OO.OO..OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO.OO.
//09_OO....OO..OO..OO..OO.OO.OO.O.O..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO....OO..OO.OO....OO.....OO.OO..OO..OO..OO......OO.OO..OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO....
//10_OO....OO..OO..OO..OO.OO.OOOOOO..OO....OO...OO..OO..OO...OOOOOO......OO..OO.OOOOOO......OOO..OOOOOO..OOO...OOO...OO.OO..OO..OO..OO.......O.OO..O....OO..OO..OO..OO..OO.OO..OO.OO.O.O.OO..OOO..
//11_OO....OO..OO..OO...OOO..OO......OO....OO...OO..OO..OO...OO..........OO..OO.OO............OO.OO........OO....OO..OO.OO..OO..OO..OO.......OOOO.OO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO.....OO.
//12_.OO..OO...OO..OO...OOO..OO..OO..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO.......OO...OO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO..OO.OO.
//13_..OOOO.....OOOOO....O....OOOO...OO.....OO...OOOOO..OO....OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO...OO..OOOO...OO..OO.......OO...OO....OO..OO..OO...OOOOO..OOOO....O...O....OOO..
//14_.............................................................................................................................................................................................
//15_.............................................................................................................................................................................................
//16_.............................................................................................................................................................................................
//17_.............................................................................................................................................................................................

// AFTER FIXING SPECIAL_FGBG_1 and FIXING SPECIAL_FGBG_2
//00_................................................................................................................................................................................................
//01_................................................................................................................................................................................................
//02_................................................................................................................................................................................................
//03_................................................................................................................................................................................................
//04_..OOOO..................................................................OO......................................OO....................OO.......OO..OO..............OO...........................
//05_.OO..OO...............................OO................................OO......................................OO....................OO.......OO..OO..............OO...........................
//06_OO....OO..............................OO................................OO.............................................................OO.O.O.OO...................OO...........................
//07_OO....OO..OO..OO.OO...OO.OOOO...OOOO.OOOO..OO..OO..OOOO..OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO..OOO..OOOO...O.OOO.......OO.O.O.OO..OOO..O.OOO....OOOOO..OOOO.OO...O...OO.OOO.....
//08_OO....OO..OO..OO..OO.OO.OO..OO..OO.O..OO...OO..OO..OO.O.OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO......OO.OOO.OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO.OO....
//09_OO....OO..OO..OO..OO.OO.OO..OO..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO....OO..OO.OO....OO.....OO.OO..OO..OO..OO......OO.OOO.OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO.......
//10_OO....OO..OO..OO..OO.OO.OOOOOO..OO....OO...OO..OO..OO...OOOOOO......OO..OO.OOOOOO......OOO..OOOOOO..OOO...OOO...OO.OO..OO..OO..OO.......O.OOO.O....OO..OO..OO..OO..OO.OO..OO.OO.O.O.OO..OOO.....
//11_OO....OO..OO..OO...OOO..OO......OO....OO...OO..OO..OO...OO..........OO..OO.OO............OO.OO........OO....OO..OO.OO..OO..OO..OO.......OOOOOOO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO.....OO....
//12_.OO..OO...OO..OO...OOO..OO..OO..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO.......OO...OO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO..OO.OO....
//13_..OOOO.....OOOOO....O....OOOO...OO.....OO...OOOOO..OO....OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO...OO..OOOO...OO..OO.......OO...OO....OO..OO..OO...OOOOO..OOOO....O...O....OOO.....
//14_................................................................................................................................................................................................
//15_................................................................................................................................................................................................
//16_................................................................................................................................................................................................
//17_................................................................................................................................................................................................

// AFTER FIXING SPECIAL_FGBG_1 and FIXING SPECIAL_FGBG_2 (Bug #5301)
//00_................................................................................................................................................................................................
//01_................................................................................................................................................................................................
//02_................................................................................................................................................................................................
//03_................................................................................................................................................................................................
//04_..OOOO..................................................................OO......................................OO....................OO...O...OO..OO..............OO...........................
//05_.OO..OO...............................OO................................OO......................................OO....................OO...O...OO..OO..............OO...........................
//06_OO....OO..............................OO................................OO.............................................................OO.OOO.OO...................OO...........................
//07_OO....OO..OO..OO.OO...OO.OOOO...OOOO.OOOO..OO..OO..OOOO..OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO..OOO..OOOO...O.OOO.......OO.OOO.OO..OOO..O.OOO....OOOOO..OOOO.OO...O...OO.OOO.....
//08_OO....OO..OO..OO..OO.OO.OO..OO..OO.O..OO...OO..OO..OO.O.OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO......OO.O.O.OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO.OO....
//09_OO....OO..OO..OO..OO.OO.OO..OO..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO....OO..OO.OO....OO.....OO.OO..OO..OO..OO......OO.O.O.OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO.......
//10_OO....OO..OO..OO..OO.OO.OOOOOO..OO....OO...OO..OO..OO...OOOOOO......OO..OO.OOOOOO......OOO..OOOOOO..OOO...OOO...OO.OO..OO..OO..OO.......O.O.O.O....OO..OO..OO..OO..OO.OO..OO.OO.O.O.OO..OOO.....
//11_OO....OO..OO..OO...OOO..OO......OO....OO...OO..OO..OO...OO..........OO..OO.OO............OO.OO........OO....OO..OO.OO..OO..OO..OO.......OOO.OOO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO.....OO....
//12_.OO..OO...OO..OO...OOO..OO..OO..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO.......OO...OO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO..OO.OO....
//13_..OOOO.....OOOOO....O....OOOO...OO.....OO...OOOOO..OO....OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO...OO..OOOO...OO..OO.......OO...OO....OO..OO..OO...OOOOO..OOOO....O...O....OOO.....
//14_................................................................................................................................................................................................
//15_................................................................................................................................................................................................
//16_................................................................................................................................................................................................
//17_................................................................................................................................................................................................
   }

    {
        int bpp = 24;
        RED_CHECK(1);

        uint8_t uncompressed[3072] = {
        /* 0000 */ 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0xbd,
                   0xb2, 0xa5, 0xbd, 0xae, 0xad, 0xd6, 0xd3, 0xc6, 0x9c, 0x86, 0x8c, 0xd6, 0xb6, 0x6b, 0xe7, 0xbe,
                   0x73, 0xe7, 0xd3, 0x7b, 0xe7, 0xcf, 0x7b, 0xe7, 0xd7, 0x84, 0xe7, 0xcb, 0x8c, 0xe7, 0xd3, 0x94,
                   0xde, 0xcb, 0x94, 0xe7, 0xdb, 0x94, 0xe7, 0xd3, 0x9c, 0xe7, 0xdf, 0x9c, 0xe7, 0xd7, 0xa5, 0xe7,
                   0xdf, 0xa5, 0xe7, 0xd7, 0xa5, 0xe7, 0xdf, 0xa5, 0xe7, 0xd7, 0xa5, 0xe7, 0xdf, 0x9c, 0xe7, 0xd3,
                   0x9c, 0xe7, 0xdb, 0x94, 0xe7, 0xcf, 0x94, 0xe7, 0xd3, 0x94, 0xe7, 0xcb, 0x8c, 0xe7, 0xcf, 0x84,

        /* 0060 */ 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0xbd,
                   0xb2, 0xa5, 0xd6, 0xc7, 0xc6, 0xc6, 0xbe, 0xad, 0x9c, 0x86, 0x8c, 0xad, 0x9a, 0x7b, 0xbd, 0x9a,
                   0x7b, 0xce, 0xba, 0x84, 0xd6, 0xb2, 0x84, 0xd6, 0xc7, 0x84, 0xe7, 0xc7, 0x8c, 0xe7, 0xd7, 0x94,
                   0xe7, 0xd7, 0x9c, 0xe7, 0xdf, 0xa5, 0xe7, 0xd7, 0xa5, 0xe7, 0xe3, 0xad, 0xe7, 0xdb, 0xad, 0xe7,
                   0xe3, 0xad, 0xe7, 0xdb, 0xad, 0xe7, 0xe3, 0xad, 0xe7, 0xd7, 0xa5, 0xe7, 0xdf, 0xa5, 0xe7, 0xd7,
                   0x9c, 0xe7, 0xdb, 0x9c, 0xe7, 0xcf, 0x94, 0xe7, 0xd3, 0x94, 0xe7, 0xcb, 0x8c, 0xe7, 0xd3, 0x8c,

        /* 00c0 */ 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0xb5,
                   0xae, 0xa5, 0xe7, 0xdb, 0xd6, 0xb5, 0xae, 0xa5, 0x94, 0x82, 0x7b, 0x94, 0x86, 0x7b, 0x94, 0x7d,
                   0x84, 0x94, 0x86, 0x84, 0x94, 0x82, 0x7b, 0xa5, 0x96, 0x84, 0xbd, 0x9a, 0x7b, 0xbd, 0xae, 0x8c,
                   0xce, 0xb6, 0x94, 0xd6, 0xc7, 0x94, 0xde, 0xcb, 0xa5, 0xe7, 0xdf, 0xad, 0xe7, 0xdb, 0xad, 0xe7,
                   0xe3, 0xb5, 0xe7, 0xdb, 0xb5, 0xe7, 0xe3, 0xb5, 0xe7, 0xdb, 0xad, 0xe7, 0xe3, 0xad, 0xe7, 0xd7,
                   0xa5, 0xe7, 0xdf, 0x9c, 0xe7, 0xd3, 0x94, 0xe7, 0xd7, 0x94, 0xe7, 0xcb, 0x94, 0xe7, 0xd3, 0x8c,

        /* 0120 */ 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0xb5,
                   0xae, 0xa5, 0xe7, 0xdb, 0xd6, 0xc6, 0xbe, 0xad, 0xad, 0x9a, 0x94, 0xa5, 0x9e, 0x94, 0x9c, 0x8e,
                   0x8c, 0x9c, 0x92, 0x84, 0x94, 0x82, 0x7b, 0x94, 0x86, 0x7b, 0x94, 0x75, 0x7b, 0x94, 0x82, 0x7b,
                   0x94, 0x75, 0x7b, 0x94, 0x82, 0x7b, 0xad, 0x92, 0x84, 0xbd, 0xae, 0x8c, 0xce, 0xb6, 0x94, 0xd6,
                   0xcf, 0xa5, 0xde, 0xcf, 0xad, 0xe7, 0xdf, 0xad, 0xe7, 0xdb, 0xad, 0xe7, 0xe3, 0xad, 0xe7, 0xdb,
                   0xad, 0xe7, 0xdf, 0xa5, 0xe7, 0xd7, 0x9c, 0xe7, 0xdb, 0x94, 0xe7, 0xcf, 0x94, 0xe7, 0xd3, 0x8c,

        /* 0180 */ 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0xbd,
                   0xba, 0xad, 0xbd, 0xae, 0xad, 0xce, 0xcb, 0xbd, 0xd6, 0xc7, 0xc6, 0xce, 0xcb, 0xbd, 0xc6, 0xb6,
                   0xad, 0xbd, 0xba, 0xad, 0xb5, 0xa2, 0x94, 0xa5, 0x9e, 0x94, 0xad, 0x8e, 0x8c, 0xa5, 0x96, 0x84,
                   0xa5, 0x86, 0x7b, 0x94, 0x8a, 0x7b, 0x94, 0x75, 0x7b, 0x94, 0x82, 0x7b, 0x94, 0x75, 0x73, 0x94,
                   0x7d, 0x73, 0xa5, 0x82, 0x7b, 0xb5, 0x96, 0x84, 0xbd, 0xa6, 0x8c, 0xce, 0xbe, 0x94, 0xde, 0xcb,
                   0xa5, 0xde, 0xd3, 0xa5, 0xe7, 0xcf, 0x94, 0xe7, 0xd7, 0x94, 0xe7, 0xcf, 0x94, 0xe7, 0xdf, 0x8c,

        /* 01e0 */ 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84,
                   0x69, 0x29, 0xb5, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xbd, 0xaa, 0xa5, 0xb5, 0xb2, 0xa5, 0xb5, 0xaa,
                   0xa5, 0xbd, 0xba, 0xad, 0xce, 0xc3, 0xbd, 0xd6, 0xcf, 0xc6, 0xce, 0xbe, 0xb5, 0xc6, 0xb6, 0xad,
                   0xbd, 0xa2, 0x9c, 0xad, 0xa2, 0x94, 0xad, 0x8e, 0x8c, 0xa5, 0x96, 0x84, 0xa5, 0x86, 0x7b, 0xa5,
                   0x8e, 0x7b, 0xa5, 0x82, 0x7b, 0xa5, 0x82, 0x73, 0xa5, 0x75, 0x73, 0x9c, 0x79, 0x6b, 0x9c, 0x71,
                   0x6b, 0xa5, 0x8a, 0x7b, 0xb5, 0x8e, 0x84, 0xce, 0xae, 0x84, 0xd6, 0xb2, 0x84, 0xe7, 0xcf, 0x8c,

        /* 0240 */ 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84,
                   0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0xad, 0x9a,
                   0x94, 0xbd, 0xb6, 0xad, 0xb5, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xb5, 0xaa, 0xa5, 0xb5, 0xb2, 0xa5,
                   0xbd, 0xae, 0xad, 0xce, 0xc3, 0xb5, 0xd6, 0xcb, 0xc6, 0xd6, 0xbe, 0xad, 0xbd, 0xa6, 0x9c, 0xbd,
                   0xa2, 0x94, 0xad, 0x8e, 0x8c, 0xa5, 0x8e, 0x7b, 0xa5, 0x86, 0x7b, 0xa5, 0x8e, 0x7b, 0xa5, 0x82,
                   0x7b, 0xa5, 0x82, 0x73, 0xa5, 0x75, 0x73, 0xa5, 0x79, 0x73, 0xa5, 0x71, 0x73, 0xa5, 0x75, 0x73,

        /* 02a0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0xad, 0xa6, 0x94,
                   0xb5, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xbd, 0xaa, 0xa5, 0xb5, 0xb2, 0xa5, 0xb5, 0xaa, 0xa5, 0xbd,
                   0xb2, 0xa5, 0xce, 0xb6, 0xad, 0xd6, 0xc7, 0xbd, 0xd6, 0xb6, 0xad, 0xbd, 0xaa, 0x9c, 0xbd, 0x9a,
                   0x94, 0xad, 0x92, 0x84, 0xa5, 0x82, 0x7b, 0xa5, 0x8a, 0x7b, 0xa5, 0x82, 0x7b, 0xad, 0x86, 0x7b,

        /* 0300 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0xad, 0x9e, 0x94, 0xb5,
                   0xb2, 0xa5, 0xbd, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xb5, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xbd, 0xaa,
                   0xa5, 0xc6, 0xb2, 0xa5, 0xce, 0xb2, 0xad, 0xce, 0xba, 0xad, 0xc6, 0xa2, 0x9c, 0xbd, 0x9e, 0x94,

        /* 0360 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0xad, 0x9e, 0x94, 0xb5, 0xb2, 0xa5, 0xb5, 0xaa,
                   0xa5, 0xbd, 0xb6, 0xad, 0xb5, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xbd, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5,

        /* 03c0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0xb5, 0xb2, 0xa5, 0xc6, 0xb6, 0xad, 0xc6, 0xbe, 0xad,

        /* 0420 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0480 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 04e0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0540 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 05a0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0600 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0660 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 06c0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0720 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0780 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 07e0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0840 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 08a0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0900 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0960 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 09c0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0a20 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0a80 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0ae0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0b40 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,

        /* 0ba0 */ 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
                   0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84,
                   0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65,
                   0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
    };

//        uint8_t compressed[] = {
//0xe2, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x90, 0x84, 0x61, 0x29, 0xbd, 0xb2, 0xa5, 0xbd, 0xae,
//0xad, 0xd6, 0xd3, 0xc6, 0x9c, 0x86, 0x8c, 0xd6, 0xb6, 0x6b, 0xe7, 0xbe, 0x73, 0xe7, 0xd3, 0x7b,
//0xe7, 0xcf, 0x7b, 0xe7, 0xd7, 0x84, 0xe7, 0xcb, 0x8c, 0xe7, 0xd3, 0x94, 0xde, 0xcb, 0x94, 0xe7,
//0xdb, 0x94, 0xe7, 0xd3, 0x9c, 0xe7, 0xdf, 0x9c, 0xe2, 0xe7, 0xd7, 0xa5, 0xe7, 0xdf, 0xa5, 0x88,
//0xe7, 0xd7, 0xa5, 0xe7, 0xdf, 0x9c, 0xe7, 0xd3, 0x9c, 0xe7, 0xdb, 0x94, 0xe7, 0xcf, 0x94, 0xe7,
//0xd3, 0x94, 0xe7, 0xcb, 0x8c, 0xe7, 0xcf, 0x84, 0x06, 0x81, 0xd6, 0xc7, 0xc6, 0xd0, 0x01, 0x10,
//0x6d, 0x6b, 0x01, 0x8a, 0xad, 0x9a, 0x7b, 0xbd, 0x9a, 0x7b, 0xce, 0xba, 0x84, 0xd6, 0xb2, 0x84,
//0xd6, 0xc7, 0x84, 0xe7, 0xc7, 0x8c, 0xe7, 0xd7, 0x94, 0xe7, 0xd7, 0x9c, 0xe7, 0xdf, 0xa5, 0xe7,
//0xd7, 0xa5, 0xe2, 0xe7, 0xe3, 0xad, 0xe7, 0xdb, 0xad, 0xd0, 0x01, 0x00, 0x3c, 0x08, 0x01, 0x82,
//0xe7, 0xdf, 0xa5, 0xe7, 0xd7, 0x9c, 0xd0, 0x03, 0x00, 0x00, 0x08, 0x01, 0xd0, 0x05, 0x00, 0x1c,
//0x08, 0x01, 0x8e, 0xb5, 0xae, 0xa5, 0xe7, 0xdb, 0xd6, 0xb5, 0xae, 0xa5, 0x94, 0x82, 0x7b, 0x94,
//0x86, 0x7b, 0x94, 0x7d, 0x84, 0x94, 0x86, 0x84, 0x94, 0x82, 0x7b, 0xa5, 0x96, 0x84, 0xbd, 0x9a,
//0x7b, 0xbd, 0xae, 0x8c, 0xce, 0xb6, 0x94, 0xd6, 0xc7, 0x94, 0xde, 0xcb, 0xa5, 0xd0, 0x01, 0x00,
//0x3c, 0x00, 0x01, 0xc3, 0x00, 0x00, 0x18, 0x86, 0xe7, 0xdb, 0xad, 0xe7, 0xe3, 0xad, 0xe7, 0xd7,
//0xa5, 0xe7, 0xdf, 0x9c, 0xe7, 0xd3, 0x94, 0xe7, 0xd7, 0x94, 0x40, 0x08, 0x01, 0x00, 0x84, 0xc6,
//0xbe, 0xad, 0xad, 0x9a, 0x94, 0xa5, 0x9e, 0x94, 0x9c, 0x8e, 0x8c, 0xd0, 0x01, 0x08, 0x14, 0x00,
//0x01, 0x81, 0x94, 0x86, 0x7b, 0xe2, 0x94, 0x75, 0x7b, 0x94, 0x82, 0x7b, 0x85, 0xad, 0x92, 0x84,
//0xbd, 0xae, 0x8c, 0xce, 0xb6, 0x94, 0xd6, 0xcf, 0xa5, 0xde, 0xcf, 0xad, 0xd0, 0x02, 0x00, 0x3c,
//0x18, 0x01, 0x84, 0xe7, 0xdb, 0xad, 0xe7, 0xdf, 0xa5, 0xe7, 0xd7, 0x9c, 0xe7, 0xdb, 0x94, 0xd0,
//0x06, 0x00, 0x04, 0x00, 0x01, 0x98, 0xbd, 0xba, 0xad, 0xbd, 0xae, 0xad, 0xce, 0xcb, 0xbd, 0xd6,
//0xc7, 0xc6, 0xce, 0xcb, 0xbd, 0xc6, 0xb6, 0xad, 0xbd, 0xba, 0xad, 0xb5, 0xa2, 0x94, 0xa5, 0x9e,
//0x94, 0xad, 0x8e, 0x8c, 0xa5, 0x96, 0x84, 0xa5, 0x86, 0x7b, 0x94, 0x8a, 0x7b, 0x94, 0x75, 0x7b,
//0x94, 0x82, 0x7b, 0x94, 0x75, 0x73, 0x94, 0x7d, 0x73, 0xa5, 0x82, 0x7b, 0xb5, 0x96, 0x84, 0xbd,
//0xa6, 0x8c, 0xce, 0xbe, 0x94, 0xde, 0xcb, 0xa5, 0xde, 0xd3, 0xa5, 0xe7, 0xcf, 0x94, 0xd1, 0x00,
//0x0c, 0x00, 0x05, 0x85, 0x84, 0x69, 0x29, 0xb5, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xbd, 0xaa, 0xa5,
//0xb5, 0xb2, 0xa5, 0xd0, 0x01, 0x73, 0x1c, 0x08, 0x01, 0x88, 0xce, 0xc3, 0xbd, 0xd6, 0xcf, 0xc6,
//0xce, 0xbe, 0xb5, 0xc6, 0xb6, 0xad, 0xbd, 0xa2, 0x9c, 0xad, 0xa2, 0x94, 0xad, 0x8e, 0x8c, 0xa5,
//0x96, 0x84, 0xd0, 0x02, 0x31, 0xf3, 0x08, 0x03, 0x88, 0xa5, 0x82, 0x73, 0xa5, 0x75, 0x73, 0x9c,
//0x79, 0x6b, 0x9c, 0x71, 0x6b, 0xa5, 0x8a, 0x7b, 0xb5, 0x8e, 0x84, 0xce, 0xae, 0x84, 0xd6, 0xb2,
//0x84, 0xd0, 0x06, 0x00, 0x10, 0x00, 0x01, 0xe2, 0x84, 0x61, 0x29, 0x84, 0x69, 0x29, 0x96, 0xad,
//0x9a, 0x94, 0xbd, 0xb6, 0xad, 0xb5, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xb5, 0xaa, 0xa5, 0xb5, 0xb2,
//0xa5, 0xbd, 0xae, 0xad, 0xce, 0xc3, 0xb5, 0xd6, 0xcb, 0xc6, 0xd6, 0xbe, 0xad, 0xbd, 0xa6, 0x9c,
//0xbd, 0xa2, 0x94, 0xad, 0x8e, 0x8c, 0xa5, 0x8e, 0x7b, 0xa5, 0x86, 0x7b, 0xa5, 0x8e, 0x7b, 0xa5,
//0x82, 0x7b, 0xa5, 0x82, 0x73, 0xa5, 0x75, 0x73, 0xa5, 0x79, 0x73, 0xa5, 0x71, 0x73, 0xa5, 0x75,
//0x73, 0xe7, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x8f, 0x84, 0x65, 0x29, 0xad, 0xa6, 0x94, 0xb5,
//0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xbd, 0xaa, 0xa5, 0xb5, 0xb2, 0xa5, 0xb5, 0xaa, 0xa5, 0xbd, 0xb2,
//0xa5, 0xce, 0xb6, 0xad, 0xd6, 0xc7, 0xbd, 0xd6, 0xb6, 0xad, 0xbd, 0xaa, 0x9c, 0xbd, 0x9a, 0x94,
//0xad, 0x92, 0x84, 0xa5, 0x82, 0x7b, 0xc2, 0x00, 0xf3, 0x08, 0x81, 0xad, 0x86, 0x7b, 0xea, 0x84,
//0x65, 0x29, 0x84, 0x6d, 0x29, 0x88, 0xad, 0x9e, 0x94, 0xb5, 0xb2, 0xa5, 0xbd, 0xaa, 0xa5, 0xbd,
//0xb2, 0xa5, 0xb5, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xbd, 0xaa, 0xa5, 0xc6, 0xb2, 0xa5, 0xc2, 0x6b,
//0x30, 0xd6, 0x82, 0xc6, 0xa2, 0x9c, 0xbd, 0x9e, 0x94, 0xec, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
//0x81, 0xad, 0x9e, 0x94, 0xc2, 0x08, 0x00, 0x00, 0x85, 0xbd, 0xb6, 0xad, 0xb5, 0xaa, 0xa5, 0xbd,
//0xb2, 0xa5, 0xbd, 0xaa, 0xa5, 0xbd, 0xb2, 0xa5, 0xee, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29, 0x81,
//0x84, 0x65, 0x29, 0x21, 0x82, 0xc6, 0xb6, 0xad, 0xc6, 0xbe, 0xad,

//// BICOLOR COUNT 672 pixels : here was the bogus behavior (fixed) that led to this test
//0xf8, 0x50, 0x01, 0x84, 0x65, 0x29, 0x84, 0x6d, 0x29,
//        };

        Bitmap bmp(bpp, bpp, &palette332, 32, 32, uncompressed, sizeof(uncompressed));

        StaticOutStream<8192> out;
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data) ; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK(2);

        Bitmap bmp2(bpp, bpp, &palette332, 32, 32, out.get_data(), out.get_offset(), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < 8192 ; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        RED_CHECK_EQUAL(0, memcmp(bmp2.data(), bmp.data(), sizeof(uncompressed)));
    }
}

RED_AUTO_TEST_CASE(TestRDP60BitmapGetRun) {
    uint32_t run_length;
    uint32_t raw_bytes;

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("AAAABBCCCCCD"), 12, 0, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(3,  run_length);
    RED_CHECK_EQUAL(1,  raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("BBCCCCCD"), 8, 0, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(4,  run_length);
    RED_CHECK_EQUAL(3,  raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("D"), 1, 0, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(0,  run_length);
    RED_CHECK_EQUAL(1,  raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("ABCDEFGHIJKL"), 12, 0, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(0,  run_length);
    RED_CHECK_EQUAL(12, raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("ABCDEFGHIJKLMNOP"), 16, 0, run_length, raw_bytes);
    LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(0,  run_length);
    RED_CHECK_EQUAL(16, raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("ABCDEFGHIJKLMNOOOOO"), 19, 0, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(4,  run_length);
    RED_CHECK_EQUAL(15, raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("\0\0\0\0\0\0\0\0"), 8, 0, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(8,  run_length);
    RED_CHECK_EQUAL(0,  raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("AAABB"), 5, 0, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(0,  run_length);
    RED_CHECK_EQUAL(5,  raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("\0\0\0\0\0\0\0\0"), 8, 0, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(8,  run_length);
    RED_CHECK_EQUAL(0,  raw_bytes);

    Bitmap::get_run(reinterpret_cast<const uint8_t *>("\0\0\0\0\0\0\0\0"), 8, 0x64, run_length, raw_bytes);
    //LOG(LOG_INFO, "run_length=%u raw_bytes=%u", run_length, raw_bytes);
    RED_CHECK_EQUAL(7,  run_length);
    RED_CHECK_EQUAL(1,  raw_bytes);
}

RED_AUTO_TEST_CASE(TestRDP60BitmapCompressColorPlane) {
    uint8_t data[] = {
        "AAAAAAAAAA" "AAAAAAAAAA" "AAAAAAAAAA" "AAAAAAAAAA" "AAAAAAAAAA"
        "AAAAAAAAAA" "AAAAAAAAAA" "AAAAAAAAAA" "AAAAAAAAAA" "AAAAAAAAAA"
    };

    StaticOutStream<1024> outbuffer;

    Bitmap::compress_color_plane(100, 1, outbuffer, data);

    uint8_t result[] = {
        0x1F, 0x41,
        0xF2,
        0x52
    };

    RED_CHECK_EQUAL(sizeof(result),  outbuffer.get_offset());
    RED_CHECK_EQUAL(0, memcmp(outbuffer.get_data(), result, outbuffer.get_offset()));
}

RED_AUTO_TEST_CASE(TestRDP60BitmapCompressColorPlane1) {
    uint8_t data[] = {
        255, 255, 255, 255, 254, 253,
        254, 192, 132,  96,  75,  25,
        253, 140,  62,  14, 135, 193
    };

    StaticOutStream<1024> outbuffer;

    Bitmap::compress_color_plane(6, 3, outbuffer, data);

    uint8_t result[] = {
        0x13, 0xFF,
        0x20, 0xFE, 0xFD,
        0x60, 0x01, 0x7D, 0xF5, 0xC2, 0x9A, 0x38,
        0x60, 0x01, 0x67, 0x8B, 0xA3, 0x78, 0xAF
    };

    RED_CHECK_EQUAL(sizeof(result),  outbuffer.get_offset());
    RED_CHECK_EQUAL(0, memcmp(outbuffer.get_data(), result, outbuffer.get_offset()));
}

RED_AUTO_TEST_CASE(TestRDP60BitmapCompressColorPlane2) {
    uint8_t data[] = {
/* 0000 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x60, 0xff, 0xff, 0xff, 0xff, 0xff,  // ..........`.....
/* 0010 */ 0xff, 0x30, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x28, 0xff, 0xff, 0xff, 0xff,  // .0.........(....
/* 0020 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff,  // ................
/* 0030 */ 0xe7, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xbf, 0xff, 0xff, 0xff,  // ................
/* 0040 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,  // ................
/* 0050 */ 0x9f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x58, 0xff, 0xff, 0xff,  // ............X...
/* 0060 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  // .........@......
/* 0070 */ 0x60, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xef, 0xff, 0xff,  // `...............
/* 0080 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  // ................
/* 0090 */ 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x8f, 0xff, 0xff,  // ................
/* 00a0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf,  // ................
/* 00b0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x30, 0xff, 0xff,  // .............0..
/* 00c0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,  // ................
/* 00d0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xc7, 0xff,  // ................
/* 00e0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x60, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40,  // ........`......@
/* 00f0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x68, 0xff,  // ..............h.
/* 0100 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x08,  // ................
/* 0110 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xf7,  // ................
/* 0120 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaf, 0x08,  // ................
/* 0130 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x97,  // ................
/* 0140 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0x08,  // .......8......`.
/* 0150 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x38,  // ...............8
/* 0160 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x08,  // .............. .
/* 0170 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0180 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x08, 0x08,  // ................
/* 0190 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 01a0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x08, 0x08,  // ................
/* 01b0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 01c0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x58, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x08, 0x08,  // ......X......@..
/* 01d0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 01e0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x08, 0x08, 0x08,  // ................
/* 01f0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0200 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0x08, 0x08, 0x08,  // ................
/* 0210 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0220 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x30, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x70, 0x08, 0x08, 0x08,  // .....0......p...
/* 0230 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0240 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x28, 0x08, 0x08, 0x08,  // .....x......(...
/* 0250 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0260 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0270 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0280 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x97, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0290 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 02a0 */ 0x08, 0x08, 0x08, 0x08, 0x50, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x50, 0x08, 0x08, 0x08, 0x08,  // ....P......P....
/* 02b0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 02c0 */ 0x08, 0x08, 0x08, 0x08, 0x97, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x09, 0x08, 0x08, 0x08, 0x08,  // ................
/* 02d0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 02e0 */ 0x08, 0x08, 0x08, 0x08, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 02f0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0300 */ 0x08, 0x08, 0x08, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x08, 0x08, 0x08, 0x08, 0x08,  // ... ............
/* 0310 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0320 */ 0x08, 0x08, 0x08, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x08, 0x08, 0x08, 0x08, 0x08,  // ...p......0.....
/* 0330 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0340 */ 0x08, 0x08, 0x08, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0350 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0360 */ 0x08, 0x08, 0x08, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0370 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 0380 */ 0x08, 0x08, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ..@......`......
/* 0390 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 03a0 */ 0x08, 0x08, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 03b0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 03c0 */ 0x08, 0x08, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 03d0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 03e0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
/* 03f0 */ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,  // ................
    };

    StaticOutStream<1024> outbuffer;

    Bitmap::compress_color_plane(32, 32, outbuffer, data);

    uint8_t result[] = {
/* 0000 */ 0x19, 0x08, 0x25, 0x60, 0xff, 0x28, 0x30, 0x08, 0x23, 0x28, 0xff, 0x0a, 0x24, 0x9e, 0x00, 0x38,  // ..%`.(0.#(..$..8
/* 0010 */ 0x2f, 0x4f, 0x00, 0x50, 0x3f, 0x7f, 0x00, 0x00, 0x00, 0x0a, 0x24, 0x80, 0x00, 0x2a, 0x8f, 0x00,  // /O.P?.....$..*..
/* 0020 */ 0x40, 0xcd, 0x00, 0x00, 0x00, 0x09, 0x34, 0x70, 0x20, 0x00, 0x2a, 0x7d, 0x00, 0x40, 0x9f, 0x1f,  // @.....4p .*}.@..
/* 0030 */ 0x00, 0x00, 0x09, 0x25, 0x80, 0x00, 0x2b, 0xad, 0x00, 0x30, 0xbf, 0x00, 0x00, 0x09, 0x24, 0x9e,  // ...%..+..0....$.
/* 0040 */ 0x00, 0x3b, 0x5f, 0x01, 0x00, 0x30, 0xbd, 0x00, 0x00, 0x08, 0x34, 0x20, 0x60, 0x00, 0x2c, 0x9d,  // .;_..0....4 `.,.
/* 0050 */ 0x00, 0x30, 0x4f, 0x6f, 0x00, 0x08, 0x25, 0x90, 0x00, 0x2d, 0x7f, 0x00, 0x20, 0xbd, 0x00, 0x08,  // .0Oo..%..-.. ...
/* 0060 */ 0x24, 0x7e, 0x00, 0x3d, 0x1f, 0x6f, 0x00, 0x20, 0xbf, 0x0f, 0x08, 0x24, 0xa0, 0x00, 0x2f, 0x7f,  // $~.=.o. ...$../.
/* 0070 */ 0x00, 0x10, 0xbf, 0x07, 0x34, 0x60, 0x20, 0x00, 0x2f, 0x9d, 0x00, 0x10, 0xbd, 0x07, 0x25, 0x90,  // ....4` ./.....%.
/* 0080 */ 0x00, 0x2f, 0x7f, 0x00, 0x10, 0x5f, 0x07, 0x24, 0x7e, 0x00, 0x3f, 0x4f, 0x2f, 0x00, 0x10, 0x00,  // ./..._.$~.?O/...
/* 0090 */ 0x06, 0x34, 0x02, 0x80, 0x00, 0x2f, 0x8f, 0x00, 0x20, 0x00, 0x00, 0x06, 0x25, 0x9e, 0x00, 0x2f,  // .4.../.. ...%../
/* 00a0 */ 0x9d, 0x00, 0x20, 0x00, 0x00, 0x06, 0x24, 0x8e, 0x00, 0x3f, 0x0f, 0x6f, 0x00, 0x20, 0x00, 0x00,  // .. ...$..?.o. ..
/* 00b0 */ 0x06, 0x24, 0x80, 0x00, 0x2f, 0x7f, 0x00, 0x03, 0x05, 0x34, 0x50, 0x40, 0x00, 0x2f, 0x8d, 0x00,  // .$../....4P@./..
/* 00c0 */ 0x03, 0x05, 0x25, 0x90, 0x00, 0x2f, 0x8f, 0x00, 0x03, 0x05, 0x24, 0x8e, 0x00, 0x3f, 0x3f, 0x3f,  // ..%../....$..???
/* 00d0 */ 0x00, 0x03, 0x05, 0x24, 0x70, 0x00, 0x2f, 0x8f, 0x00, 0x04, 0x04, 0x34, 0x90, 0x10, 0x00, 0x2f,  // ...$p./....4.../
/* 00e0 */ 0x8d, 0x00, 0x04, 0x04, 0x24, 0x8e, 0x00, 0x3f, 0x0f, 0x8d, 0x00, 0x04, 0x04, 0x24, 0x90, 0x00,  // ....$..?.....$..
/* 00f0 */ 0x3f, 0x6f, 0x01, 0x00, 0x04, 0x64, 0x00, 0x00, 0x00, 0x30, 0x40, 0x00, 0x2f, 0x7d, 0x00, 0x05,  // ?o...d...0@./}..
/* 0100 */ 0x55, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x2f, 0x9f, 0x00, 0x05, 0x54, 0x00, 0x00, 0x00, 0x8e, 0x00,  // U...../...T.....
/* 0110 */ 0x3f, 0x2f, 0x4f, 0x00, 0x05, 0x54, 0x00, 0x00, 0x00, 0x80, 0x00, 0x2f, 0x8f, 0x00, 0x06, 0x54,  // ?/O..T...../...T
/* 0120 */ 0x00, 0x00, 0x70, 0x10, 0x00, 0x2f, 0x7d, 0x00, 0x06, 0x45, 0x00, 0x00, 0x9e, 0x00, 0x2f, 0xad,  // ..p../}..E..../.
/* 0130 */ 0x00, 0x06, 0x44, 0x00, 0x00, 0x90, 0x00, 0x3f, 0x6f, 0x01, 0x00, 0x06, 0x44, 0x00, 0x00, 0x62,  // ..D....?o...D..b
/* 0140 */ 0x12, 0x2f, 0x82, 0x00, 0x07,                                   // ./...
    };

    RED_CHECK_EQUAL(sizeof(result),  outbuffer.get_offset());
    RED_CHECK_EQUAL(0, memcmp(outbuffer.get_data(), result, outbuffer.get_offset()));
}


RED_AUTO_TEST_CASE(TestRDP60BitmapCompression) {
    BGRPalette const & palette332 = BGRPalette::classic_332();


    const char * filename = FIXTURES_PATH "/color_image_160x120.png";

    Bitmap bmp = bitmap_from_file(filename);

    StaticOutStream<65536> compressed_bitmap_data;
    bmp.compress(32, compressed_bitmap_data);

    Bitmap bmp2(32, 24, &palette332, bmp.cx(), bmp.cy(), compressed_bitmap_data.get_data(), compressed_bitmap_data.get_offset(), true);

    RED_CHECK_EQUAL(0, memcmp(bmp.data(), bmp2.data(), bmp.bmp_size()));
}

RED_AUTO_TEST_CASE(TestRDP60BitmapCompression1) {
    BGRPalette const & palette332 = BGRPalette::classic_332();


    const char * filename = FIXTURES_PATH "/color_image_40x30.png";

    Bitmap bmp = bitmap_from_file(filename);

    StaticOutStream<65536> compressed_bitmap_data;
    bmp.compress(32, compressed_bitmap_data);

    Bitmap bmp2(32, 24, &palette332, bmp.cx(), bmp.cy(), compressed_bitmap_data.get_data(), compressed_bitmap_data.get_offset(), true);

    RED_CHECK_EQUAL(0, memcmp(bmp.data(), bmp2.data(), bmp.bmp_size()));
}

RED_AUTO_TEST_CASE(TestRDP60BitmapCompression2) {
    BGRPalette const & palette332 = BGRPalette::classic_332();


    const char * filename = FIXTURES_PATH "/red_box.png";

    Bitmap bmp = bitmap_from_file(filename);

    StaticOutStream<65536> compressed_bitmap_data;
    bmp.compress(32, compressed_bitmap_data);

    Bitmap bmp2(32, 24, &palette332, bmp.cx(), bmp.cy(), compressed_bitmap_data.get_data(), compressed_bitmap_data.get_offset(), true);

    RED_CHECK_EQUAL(0, memcmp(bmp.data(), bmp2.data(), bmp.bmp_size()));
}

RED_AUTO_TEST_CASE(TestRDP60BitmapCompression3) {
    BGRPalette const & palette332 = BGRPalette::classic_332();


    const char * filename = FIXTURES_PATH "/wablogoblue_220x76.png";

    Bitmap bmp = bitmap_from_file(filename);

    StaticOutStream<65536> compressed_bitmap_data;
    bmp.compress(32, compressed_bitmap_data);

    Bitmap bmp2(32, 24, &palette332, bmp.cx(), bmp.cy(), compressed_bitmap_data.get_data(), compressed_bitmap_data.get_offset(), true);

    RED_CHECK_EQUAL(0, memcmp(bmp.data(), bmp2.data(), bmp.bmp_size()));
}


RED_AUTO_TEST_CASE(TestRDP60BitmapCompression4) {
    const BGRPalette & palette332 = BGRPalette::classic_332();

    const char * filename = FIXTURES_PATH "/red_box_20x20.png";

    Bitmap bmp = bitmap_from_file(filename);

    StaticOutStream<65536> compressed_bitmap_data;
    bmp.compress(32, compressed_bitmap_data);

    Bitmap bmp2(32, 24, &palette332, bmp.cx(), bmp.cy(), compressed_bitmap_data.get_data(), compressed_bitmap_data.get_offset(), true);

    RED_CHECK_EQUAL(0, memcmp(bmp.data(), bmp2.data(), bmp.bmp_size()));
}

RED_AUTO_TEST_CASE(TestRDP60BitmapDecompressColorPlane) {
    uint8_t data[] = {
        0x13, 0xFF, 0x20, 0xFE, 0xFD,
        0x60, 0x01, 0x7D, 0xF5, 0xC2, 0x9A, 0x38,
        0x60, 0x01, 0x67, 0x8B, 0xA3, 0x78, 0xAF
    };

    StaticOutStream<1024> outbuffer;

    const uint8_t * compressed_data      = data;
    size_t          compressed_data_size = sizeof(data);

    uint8_t color_plane[6 * 3];

    Bitmap::decompress_color_plane(6, 3, compressed_data, compressed_data_size, 6, color_plane);

    uint8_t result[] = {
        255, 255, 255, 255, 254, 253,
        254, 192, 132, 96,  75,  25,
        253, 140, 62,  14,  135, 193
    };

    RED_CHECK_EQUAL(0, memcmp(color_plane, result, sizeof(color_plane)));
}

RED_AUTO_TEST_CASE(TestRDP60BitmapDecompression) {
    uint8_t bitmap_data[]     = {
/* 0000 */ 0x10, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0010 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0020 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0030 */ 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0040 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0050 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0060 */ 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0070 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2,  // ................
/* 0080 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0090 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00a0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81,  // ................
/* 00b0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00c0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00d0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00e0 */ 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00f0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0100 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0110 */ 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0120 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2,  // ................
/* 0130 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0140 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0150 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2,  // ................
/* 0160 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0170 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0180 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0190 */ 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01a0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01b0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01c0 */ 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01d0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01e0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01f0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0200 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2,  // ................
/* 0210 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0220 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0230 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81,  // ................
/* 0240 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0250 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x81,                                            // .........
    };
    uint32_t bitmap_data_size = 601;
    uint16_t cx               = 1152;
    uint16_t cy               = 6;
    uint8_t  bpp              = 32;

    RED_CHECK_EQUAL(sizeof(bitmap_data), bitmap_data_size);

    Bitmap bmp(bpp, bpp, nullptr, cx, cy, bitmap_data, bitmap_data_size, true);
}

RED_AUTO_TEST_CASE(TestRDP60BitmapDecompression1) {
    uint8_t bitmap_data[]     = {
/* 0000 */ 0x30, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // 0...............
/* 0010 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2,  // ................
/* 0020 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0030 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0040 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0050 */ 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0060 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0070 */ 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0080 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2,  // ................
/* 0090 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00a0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00b0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00c0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00d0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00e0 */ 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 00f0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2,  // ................
/* 0100 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0110 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0120 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0130 */ 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0140 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0150 */ 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0160 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2,  // ................
/* 0170 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0180 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 0190 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01a0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01b0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01c0 */ 0x0b, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01d0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b, 0xf2, 0xf2, 0xf2,  // ................
/* 01e0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,  // ................
/* 01f0 */ 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0x0b,                       // .........
    };
    uint32_t bitmap_data_size = 505;
    uint16_t cx               = 1280;
    uint16_t cy               = 6;
    uint8_t  bpp              = 32;

    RED_CHECK_EQUAL(sizeof(bitmap_data), bitmap_data_size);

    Bitmap bmp(bpp, bpp, nullptr, cx, cy, bitmap_data, bitmap_data_size, true);

    StaticOutStream<65536> compressed_bitmap_data;
    bmp.compress(bpp, compressed_bitmap_data);

    RED_CHECK_EQUAL(bitmap_data_size, compressed_bitmap_data.get_offset());
}


RED_AUTO_TEST_CASE(TestBogusRLEDecompression1) {
    uint8_t bpp = 16;
    const BGRPalette & palette332 = BGRPalette::classic_332();

    // x=591; y=138; w=368; h=10; dw=367; dh=10; bpp=16; cf=1; sz=756
    uint8_t compressed[] ={
            // COPY 11 -> why not FOM_SET 0x99 0xD6 0b11110111 COPY 3 = 0xD1 0x99 0xD6 0xF7 0x83 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6
//            0xD1, 0x99, 0xD6, 0xF7, 0x83, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6,
            0x8b, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99,
            0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6,

            // FOM_SET 8 0x99 0xD6 0b00110101 0b11101101 0b11011101 0b11011101 0b11111101 0b01110111 0b11011101 0b11011101
            0xd8, 0x99, 0xd6, 0x35, 0xed, 0xdd, 0xdd, 0xf5, 0x77, 0x5d, 0xdd,


            0x85, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x46, 0x75, 0xed,
            0x5d, 0xd7, 0x75, 0x5d, 0x81, 0x99, 0xd6, 0x44, 0xd5, 0x75, 0xed, 0xdd, 0x01, 0x80, 0x05, 0x99,
            0xd6, 0x99, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x00,
            0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99,
            0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x00,
            0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99,
            0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x43, 0x5d, 0xad, 0x5d, 0x80, 0x08, 0x99,
            0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99,
            0xd6, 0x00, 0x00, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99,
            0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00,
            0x00, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x00,
            0x00, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x44,
            0x77, 0xed, 0xad, 0xe9, 0x83, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x43, 0xd7, 0xf5, 0x5d, 0x85,
            0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x40, 0x28, 0xd5, 0x75, 0xed, 0x9a,
            0xfe, 0x00, 0x40, 0x22, 0x1c, 0x00, 0xd2, 0x00, 0x00, 0xfe, 0x48, 0x03, 0x0d, 0x00, 0x10, 0x00,
            0x00, 0xa8, 0x01, 0x01, 0x18, 0x46, 0x3d, 0x00, 0xa0, 0x01, 0x80, 0x00, 0x01, 0x0b, 0x43, 0x01,
            0x00, 0x80, 0x40, 0x40, 0x06, 0x00, 0x80, 0x20, 0x00, 0x10, 0x70, 0xa0, 0x00, 0x86, 0x00, 0x00,
            0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x50, 0x0d, 0x01, 0x20, 0x08, 0x00,
            0x00, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x60, 0xf0, 0x00, 0x40, 0xc2, 0x9e, 0x01, 0xe0,
            0xf1, 0x00, 0xf0, 0x0c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x78, 0x0f, 0x80,
            0x07, 0x00, 0x06, 0x0f, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0xe1, 0x01,
            0x00, 0xe0, 0x19, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0xf0, 0xc0, 0x03, 0x00, 0xd8, 0x00,
            0xc0, 0x01, 0x06, 0x81, 0x99, 0xd6, 0x44, 0xb3, 0x39, 0x0c, 0x80, 0x81, 0x99, 0xd6, 0x50, 0xc1,
            0x01, 0xe0, 0x2c, 0x40, 0x80, 0x20, 0x38, 0x0f, 0x40, 0x58, 0xf0, 0x00, 0x70, 0x1c, 0x00, 0x01,
            0x81, 0x99, 0xd6, 0xf2, 0x08, 0x01, 0x03, 0x80, 0x05, 0x47, 0x80, 0x1c, 0x38, 0x10, 0xd8, 0x9c,
            0x85, 0x05, 0x00, 0x90, 0x03, 0x00, 0x00, 0x10, 0x1c, 0x38, 0x00, 0x00, 0x80, 0x0f, 0x78, 0xf0,
            0x80, 0xef, 0xe0, 0xf9, 0xf0, 0xf0, 0x7c, 0x96, 0x99, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x99, 0xd6,
            0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6,
            0x00, 0x00, 0x99, 0xd6, 0x43, 0xe7, 0x7d, 0x80, 0xfe, 0x45, 0xe7, 0x3d, 0x78, 0x00, 0x7d, 0x01,
            0x82, 0x00, 0x00, 0x00, 0x00, 0x45, 0x03, 0xe0, 0xe1, 0xe1, 0xc9, 0x85, 0x00, 0x00, 0x99, 0xd6,
            0x99, 0xd6, 0x00, 0x00, 0x99, 0xd6, 0x43, 0xf7, 0x7d, 0xf0, 0x01, 0x25, 0x02, 0x0a, 0x25, 0x01,
            0x8c, 0x99, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99, 0xd6, 0x99,
            0xd6, 0x99, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x99, 0xd6, 0x08, 0x05, 0x25, 0x40, 0x39, 0x3e, 0xe1,
            0xd3, 0x83, 0xe7, 0xe9, 0x03, 0x00, 0xfe, 0x10, 0x60, 0x11, 0x99, 0xd6, 0x03, 0x74, 0x99, 0xd6,
            0x03, 0x60, 0x26, 0x99, 0xd6, 0x07, 0x60, 0x0b, 0x99, 0xd6, 0x02, 0x67, 0x99, 0xd6, 0x01, 0x60,
            0x09, 0x99, 0xd6, 0x01, 0x60, 0x15, 0x99, 0xd6, 0x01, 0x72, 0x99, 0xd6, 0x02, 0x6e, 0x99, 0xd6,
            0x01, 0x76, 0x99, 0xd6, 0xf2, 0x65, 0x03, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x40,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x08, 0x00,
            0x02, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x49, 0x00, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x60, 0xcb, 0x99, 0xd6, 0xf0, 0x6d, 0x01, 0x84, 0x99, 0xd6, 0x99, 0xd6,
            0x99, 0xd6, 0x00, 0x00,
    };

    Bitmap bmp2(bpp, bpp, &palette332, 368, 10, compressed, sizeof(compressed), true);
    Drawable gd(368, 10);
    gd.mem_blt(Rect(0, 0, 368, 10), bmp2, 0, 0);

    Bitmap bitmap_0_;

    Bitmap bitmap_1_(bitmap_0_);

    Bitmap bitmap_2_ = bitmap_1_;
}


// to see last result file, remove unlink
// and do something like:
// eog `ls -1tr /tmp/test_* | tail -n 1`
// (or any other variation you like)


RED_AUTO_TEST_CASE(TestConvertBitmap)
{
    BGRPalette palette332(BGRPalette::classic_332());

    const uint8_t source_bpp = 16;
    const uint16_t cx = 2;
    const uint16_t cy = 3;
    const uint8_t data[] = {
        0xFF, 0xFF,   0xFF, 0xFF,
        0xFF, 0xFF,   0xFF, 0xFF,
        0xFF, 0xFF,   0xFF, 0xFF,
    };

    Bitmap bmp16(16, source_bpp, &palette332, cx, cy, data, cx * nbbytes(source_bpp) * cy, false);
    RED_CHECK_EQUAL(24, bmp16.bmp_size());

    // TODO Check that: cx is now forced to be a multiple of 4 when creating bitmap, previous behaviour was only forcing line size to be aligned as a multiple of 4 (RDP constraint). See it has not effect on provided data and not other unwanted effect
    RED_CHECK_EQUAL(8, bmp16.line_size());
    RED_CHECK_EQUAL(4, bmp16.cx());
    RED_CHECK_EQUAL(cy, bmp16.cy());
    RED_CHECK_EQUAL(16, bmp16.bpp());

    uint16_t target_bpp = 24;
    Bitmap bmp24(target_bpp, bmp16);
    RED_CHECK_EQUAL(36, bmp24.bmp_size());
    RED_CHECK_EQUAL(12, bmp24.line_size());
    RED_CHECK_EQUAL(4, bmp24.cx());
    RED_CHECK_EQUAL(cy, bmp24.cy());
    RED_CHECK_EQUAL(24, bmp24.bpp());

    const uint8_t * outbuf = bmp24.data();

    RED_CHECK_EQUAL(0xFF, outbuf[0]);
    RED_CHECK_EQUAL(0xFF, outbuf[1]);
    RED_CHECK_EQUAL(0xFF, outbuf[2]);

    RED_CHECK_EQUAL(0xFF, outbuf[3]);
    RED_CHECK_EQUAL(0xFF, outbuf[4]);
    RED_CHECK_EQUAL(0xFF, outbuf[5]);

    // TODO We should force to black uninitialized parts of bitmap. For now it is random
    RED_CHECK_EQUAL(outbuf[6], outbuf[6]);
    RED_CHECK_EQUAL(outbuf[7], outbuf[7]);
    RED_CHECK_EQUAL(outbuf[8], outbuf[8]);

    RED_CHECK_EQUAL(outbuf[9], outbuf[9]);
    RED_CHECK_EQUAL(outbuf[10], outbuf[10]);
    RED_CHECK_EQUAL(outbuf[11], outbuf[11]);

    // ---------------------------------

    RED_CHECK_EQUAL(0xFF, outbuf[12]);
    RED_CHECK_EQUAL(0xFF, outbuf[13]);
    RED_CHECK_EQUAL(0xFF, outbuf[14]);

    RED_CHECK_EQUAL(0xFF, outbuf[15]);
    RED_CHECK_EQUAL(0xFF, outbuf[16]);
    RED_CHECK_EQUAL(0xFF, outbuf[17]);

    // TODO We should force to black uninitialized parts of bitmap. For now it is random
    RED_CHECK_EQUAL(outbuf[18], outbuf[18]);
    RED_CHECK_EQUAL(outbuf[19], outbuf[19]);
    RED_CHECK_EQUAL(outbuf[20], outbuf[20]);

    RED_CHECK_EQUAL(outbuf[21], outbuf[21]);
    RED_CHECK_EQUAL(outbuf[22], outbuf[22]);
    RED_CHECK_EQUAL(outbuf[23], outbuf[23]);

    // ---------------------------------

    RED_CHECK_EQUAL(0xFF, outbuf[24]);
    RED_CHECK_EQUAL(0xFF, outbuf[25]);
    RED_CHECK_EQUAL(0xFF, outbuf[26]);

    RED_CHECK_EQUAL(0xFF, outbuf[27]);
    RED_CHECK_EQUAL(0xFF, outbuf[28]);
    RED_CHECK_EQUAL(0xFF, outbuf[29]);

    // TODO We should force to black uninitialized parts of bitmap. For now it is random
    RED_CHECK_EQUAL(outbuf[30], outbuf[30]);
    RED_CHECK_EQUAL(outbuf[31], outbuf[31]);
    RED_CHECK_EQUAL(outbuf[32], outbuf[32]);

    RED_CHECK_EQUAL(outbuf[33], outbuf[33]);
    RED_CHECK_EQUAL(outbuf[34], outbuf[34]);
    RED_CHECK_EQUAL(outbuf[35], outbuf[35]);

}


RED_AUTO_TEST_CASE(TestConvertBitmap2)
{
    //const char * filename = FIXTURES_PATH "/win2008capture10.png";

    //Bitmap bmp24 = bitmap_from_file(filename);

    BGRPalette palette332(BGRPalette::classic_332());

    uint8_t raw24[60] = {
        0x22, 0x17, 0x48,   0xc7, 0xcd, 0xc4,   0xad, 0xf8, 0x61,   0x6f, 0x32, 0xd6,   0x13, 0x61, 0xee,
        0xb2, 0x7b, 0x81,   0x0f, 0x66, 0x22,   0x17, 0x48, 0xc7,   0xcd, 0xc4, 0xad,   0xf8, 0x61, 0x6f,
        0x32, 0xd6, 0x13,   0x61, 0xee, 0xb2,   0x7b, 0x81, 0x0f,   0x66, 0x22, 0x17,   0x48, 0xc7, 0xcd,
        0xc4, 0xad, 0xf8,   0x61, 0x6f, 0x32,   0xd6, 0x13, 0x61,   0xee, 0xb2, 0x7b,   0x81, 0x0f, 0x66
    };

    Bitmap bmp24(24, 24, &palette332, 4, 5, raw24, sizeof(raw24));



    RED_CHECK_EQUAL(bmp24.bpp(), 24);

    Bitmap bmp_24_to_24(24, bmp24);
    Bitmap bmp_24_to_16(16, bmp24);
    Bitmap bmp_24_to_15(15, bmp24);
    Bitmap bmp_24_to_8(8, bmp24);

    Bitmap bmp_16_to_24(24, bmp_24_to_16);
    Bitmap bmp_16_to_16(16, bmp_24_to_16);
    Bitmap bmp_16_to_15(15, bmp_24_to_16);
    Bitmap bmp_16_to_8(8, bmp_24_to_16);

    Bitmap bmp_15_to_24(24, bmp_24_to_15);
    Bitmap bmp_15_to_16(16, bmp_24_to_15);
    Bitmap bmp_15_to_15(15, bmp_24_to_15);
    Bitmap bmp_15_to_8(8, bmp_24_to_15);

    Bitmap bmp_8_to_24(24, bmp_24_to_8);
    Bitmap bmp_8_to_16(16, bmp_24_to_8);
    Bitmap bmp_8_to_15(15, bmp_24_to_8);
    Bitmap bmp_8_to_8(8, bmp_24_to_8);

    RED_CHECK_SIG(bmp_24_to_24, "\xaa\x33\x05\x87\x63\x66\xc0\x9d\x89\x78\x00\xe7\x9b\x8f\x09\x2e\xbf\x06\x64\x74");
    RED_CHECK_SIG(bmp_24_to_16, "\xfd\x08\xc9\x9c\x81\x9f\xea\x1c\xc0\x95\xba\x62\x89\xb5\xbc\x2b\x09\x46\x6d\xb6");
    RED_CHECK_SIG(bmp_24_to_15, "\x54\x2e\xb3\x9e\xde\x5b\x21\x9f\xb8\xd1\x9a\x58\xc1\xd0\x93\xa3\xa0\x46\x87\x36");
    RED_CHECK_SIG(bmp_24_to_8,  "\xbe\x71\x06\x2a\x49\xc9\x89\xea\x64\x9d\x26\xe8\xbb\xf5\x7c\xd0\x0d\x11\xe9\x69");

    RED_CHECK_SIG(bmp_16_to_24, "\xfc\x0b\xbd\xe2\x01\x89\x05\x96\x88\xc2\x13\xd1\xb6\x14\xe9\x85\xf6\xa3\x5a\xd4");
    RED_CHECK_SIG(bmp_16_to_16, "\xfd\x08\xc9\x9c\x81\x9f\xea\x1c\xc0\x95\xba\x62\x89\xb5\xbc\x2b\x09\x46\x6d\xb6");
    RED_CHECK_SIG(bmp_16_to_15, "\x54\x2e\xb3\x9e\xde\x5b\x21\x9f\xb8\xd1\x9a\x58\xc1\xd0\x93\xa3\xa0\x46\x87\x36");
    RED_CHECK_SIG(bmp_16_to_8,  "\xbe\x71\x06\x2a\x49\xc9\x89\xea\x64\x9d\x26\xe8\xbb\xf5\x7c\xd0\x0d\x11\xe9\x69");

    RED_CHECK_SIG(bmp_15_to_24, "\xe9\x84\xe3\x49\x01\x2c\x2e\xff\xf0\x60\x6b\x18\x14\xce\x54\x8f\x2a\xae\x9a\x22");
    RED_CHECK_SIG(bmp_15_to_16, "\x69\xb9\x98\x9d\x6e\xd6\x7d\xc1\xd0\x0e\x8b\x58\xaa\x6a\x6e\x8c\xa6\xc4\xe4\x2b");
    RED_CHECK_SIG(bmp_15_to_15, "\x54\x2e\xb3\x9e\xde\x5b\x21\x9f\xb8\xd1\x9a\x58\xc1\xd0\x93\xa3\xa0\x46\x87\x36");
    RED_CHECK_SIG(bmp_15_to_8,  "\xbe\x71\x06\x2a\x49\xc9\x89\xea\x64\x9d\x26\xe8\xbb\xf5\x7c\xd0\x0d\x11\xe9\x69");

    RED_CHECK_SIG(bmp_8_to_24,  "\x3d\x92\x0a\x5f\x62\x97\xd2\xa9\xe4\x16\x1b\xa7\xcb\xb9\x77\xb4\x4f\xaf\x5d\xe3");
    RED_CHECK_SIG(bmp_8_to_16,  "\xbe\x5d\x4c\x63\x36\x2e\x01\x82\x0a\x65\xf1\xd5\x33\x3c\xb0\x04\x67\x7e\x24\x35");
    RED_CHECK_SIG(bmp_8_to_15,  "\x19\x66\xa2\xcd\xfd\x77\x1b\xe4\xab\xf8\x6e\x03\x77\xf5\xa9\xa6\xe4\x85\x2b\x39");
    RED_CHECK_SIG(bmp_8_to_8,   "\xbe\x71\x06\x2a\x49\xc9\x89\xea\x64\x9d\x26\xe8\xbb\xf5\x7c\xd0\x0d\x11\xe9\x69");

    //dump_png("/tmp/rawdisk/24_24.png", bmp_24_to_24);
    //dump_png("/tmp/rawdisk/24_16.png", bmp_24_to_16);
    //dump_png("/tmp/rawdisk/24_15.png", bmp_24_to_15);
    //dump_png("/tmp/rawdisk/24_8.png", bmp_24_to_8);

    //dump_png("/tmp/rawdisk/16_24.png", bmp_16_to_24);
    //dump_png("/tmp/rawdisk/16_16.png", bmp_16_to_16);
    //dump_png("/tmp/rawdisk/16_15.png", bmp_16_to_15);
    //dump_png("/tmp/rawdisk/16_8.png", bmp_16_to_8);

    //dump_png("/tmp/rawdisk/15_24.png", bmp_15_to_24);
    //dump_png("/tmp/rawdisk/15_16.png", bmp_15_to_16);
    //dump_png("/tmp/rawdisk/15_15.png", bmp_15_to_15);
    //dump_png("/tmp/rawdisk/15_8.png", bmp_15_to_8);

    //dump_png("/tmp/rawdisk/8_24.png", bmp_8_to_24);
    //dump_png("/tmp/rawdisk/8_16.png", bmp_8_to_16);
    //dump_png("/tmp/rawdisk/8_15.png", bmp_8_to_15);
    //dump_png("/tmp/rawdisk/8_8.png", bmp_8_to_8);
}
