REDEMPTION_PUBLIC_PATH ?= [ SHELL "readlink -n -f ../.." ] ;

ECHO redemption-src: $(REDEMPTION_PUBLIC_PATH) ;

JAM_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/jam ;
REDEMPTION_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/include ;
REDEMPTION_MODULES_SRC_PATH ?= $(REDEMPTION_PUBLIC_PATH)/modules ;


include $(JAM_INCLUDE_PATH)/redemption-config.jam ;
include $(JAM_INCLUDE_PATH)/cxxflags.jam ;
include $(JAM_INCLUDE_PATH)/defines.jam ;
include $(JAM_INCLUDE_PATH)/includes.jam ;


# select best Qt version
## @{
import os ;
local qtversion = [ os.environ qt ] ;

if ! $(qtversion)
{
    qtversion = [ os.environ qtversion ] ;

    if ! $(qtversion)
    {
        qtversion = [ os.environ KDE_SESSION_VERSION ] ;
        if $(qtversion)
        {
            echo "KDE_SESSION_VERSION=$(qtversion) found. Use Qt$(qtversion)." ;
        }
    }
}

if $(qtversion) != 4 && $(qtversion) != 5 && $(qtversion) != 6
{
    echo "Unknown Qt$(qtversion)." ;
    qtversion = ;
    exit "Please set a valid Qt version (4 or 5) with `bjam -s qt=4`." ;
}
## @}


if $(qtversion) = 4
{
    # TODO search include qt4 directory
    constant QT4_INCLUDE : [ setvar QT4_INCLUDE : /usr/include/qt4 ] ;

    constant QT_INCLUDES : $(QT4_INCLUDE) ;
}

if $(qtversion) = 5
{
    # Need packages qttools5-dev libphonon4qt5-dev
    # TODO search include qt5 directory
    constant QT5_INCLUDE : [ setvar QT5_INCLUDE : /usr/include/x86_64-linux-gnu/qt$(qtversion) ] ;
    # TODO search include phonon directory
    constant QT5_PHONON_INCLUDE : [ setvar QT5_PHONON_INCLUDE : /usr/include/phonon4qt$(qtversion)/phonon ] ;

    constant QT_INCLUDES : $(QT5_INCLUDE) $(QT5_PHONON_INCLUDE) ;
}

lib gssglue : : <name>gssglue <link>shared ;

constant SHELL_PWD : [ SHELL "echo -n $PWD" ] ; # rule location

constant CLIENT_REDEMPTION_MAIN_PATH : [ setvar CLIENT_REDEMPTION_MAIN_PATH : $(SHELL_PWD) ] ;

if $(qtversion) = 4
{
    rule disable-buggy-warn ( properties * )
    {
        local ps = [ property-set.create $(properties) ] ;
        local toolset = [ $(ps).get <toolset> ] ;

        local flags = <cxxflags>-Wzero-as-null-pointer-constant&&-Wno-zero-as-null-pointer-constant ;

        return $(flags) ;
    }
}
else
{
    rule disable-buggy-warn ( properties * )
    {
        return ;
    }
}

project redemption_qt_client
    : requirements

    <conditional>@includes
    <conditional>@flags
    <conditional>@disable-buggy-warn

    $(CXXFLAGS)

    # <cxxflags>-fPIC
    <variant>debug:<cxxflags>-frtti

    <define>_FILE_OFFSET_BITS=64
    <define>_LARGEFILE64_SOURCE
    <define>__STDC_FORMAT_MACROS
    <define>ZLIB_CONST

    <define>QT_NO_KEYWORDS

    <cxxflags>-isystem$(QT_INCLUDES)

    <toolset>gcc:<cxxflags>-Wno-missing-include-dirs



   : default-build release
;

include $(JAM_INCLUDE_PATH)/libs.jam ;

explicit install instexe install-bin ;

alias instexe : install-bin ;
alias install : install-bin ;

install install-bin
    : client_rdp
    : <install-type>EXE <install-dependencies>on
    : <location>$(INSTALLDIR)/usr/local/bin
    ;

obj config.o : $(REDEMPTION_CONFIG_PATH)/redemption_src/configs/config.cpp ;

local obj_list = config.o ;
local lib_list = ;
local requirement_list = ;

rule add_src ( src : requirements * )
{
    obj $(src).o : $(REDEMPTION_SRC_PATH)/$(src) : $(requirements) ;
    obj_list += $(src).o ;
}

rule add_requirements ( requirements * )
{
    requirement_list += $(requirements) ;
}

rule add_lib ( lib )
{
    lib_list += $(lib) ;
}

add_src core/app_path.cpp :
    <conditional>@defines
    <define>SHARE_PATH='\"$(FIXTURES_PATH)\"'
    <define>CFG_PATH='\"$(REDEMPTION_SYS_PATH)$(CLIENT_REDEMPTION_MAIN_PATH)\"'
    ;

add_src utils/log_as_logprint.cpp ;

# generated by `bjam targets.jam` from redemption project
include redemption_deps.jam ;


constant EXE_DEPENDENCIES :
    <define>CLIENT_REDEMPTION_MAIN_PATH='\"$(CLIENT_REDEMPTION_MAIN_PATH)\"'
    <define>REDEMPTION_QT_VERSION=$(qtversion)
;

if $(qtversion) = 4
{
    local CXX_BJAM_YEAR_VERSION = [ modules.peek : JAMVERSION ] ;
    if $(CXX_BJAM_YEAR_VERSION) < 2016.00 {
        using qt : /usr ;
    }
    else {
        using qt4 : /usr ;
    }
    alias libqtclient : /qt//QtGui ;
    alias libphonon : /qt//phonon ;
}
else
{
    using qt5
        : /usr/lib/x86_64-linux-gnu/qt5
        : 5.3
        :
        :
        :
        :
        : $(QT5_INCLUDE)
        : /usr/lib/x86_64-linux-gnu
        ;

    alias libqtclient :
        /qt5//QtGui
        /qt5//QtNetwork
        /qt5//QtWidgets
        /qt5//QtCore
    ;

    lib libphonon : : <name>phonon4qt5 <link>shared ;
}


obj front_Qt$(qtversion)_rdp.o : src/main_qt_client_redemption.cpp :
    <define>REDEMPTION_DECL_LOG_TEST
    $(EXE_DEPENDENCIES)
    <include>$(REDEMPTION_TEST_PATH)/includes # lcg/fixed random
;

obj gd$(qtversion).o : src/qt_input_output_api/qt_IO_graphic_mouse_keyboard.cpp :
    <define>REDEMPTION_DECL_LOG_TEST
    $(EXE_DEPENDENCIES)
;

exe client_rdp :
    src/qt_input_output_api/qt_output_sound.hpp
    src/qt_input_output_api/qt_input_output_clipboard.hpp
    src/qt_input_output_api/qt_input_socket.hpp
    src/qt_input_output_api/qt_graphics_components/qt_progress_bar_window.hpp
    src/qt_input_output_api/qt_graphics_components/qt_options_window.hpp
    src/qt_input_output_api/qt_graphics_components/qt_screen_window.hpp
    src/qt_input_output_api/qt_graphics_components/qt_form_window.hpp
    front_Qt$(qtversion)_rdp.o
    gd$(qtversion).o
    $(obj_list)
    $(lib_list)
    libqtclient
    # TODO: disable phonon requirement when compiling with -D_NO_SOUND
    libphonon
:
    $(EXE_DEPENDENCIES)
    $(requirement_list)
    # disable moc warnings
    <toolset>gcc:<cxxflags>-Wuseless-cast&&-Wno-useless-cast
    <toolset>clang:<cxxflags>-Wredundant-parens&&-Wno-redundant-parens
;

#obj test_client.o : src/test_client_redemption.cpp :
#    <define>REDEMPTION_DECL_LOG_TEST
#    $(EXE_DEPENDENCIES)
#;
